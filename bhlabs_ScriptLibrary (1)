var bhlabs;
(() => {
  "use strict";
  var e = {
      654: function(e, t, o) {
        var n =
          (this && this.__awaiter) ||
          function(e, t, o, n) {
            return new (o || (o = Promise))(function(r, i) {
              function a(e) {
                try {
                  c(n.next(e));
                } catch (e) {
                  i(e);
                }
              }
              function s(e) {
                try {
                  c(n.throw(e));
                } catch (e) {
                  i(e);
                }
              }
              function c(e) {
                var t;
                e.done
                  ? r(e.value)
                  : ((t = e.value),
                    t instanceof o
                      ? t
                      : new o(function(e) {
                          e(t);
                        })).then(a, s);
              }
              c((n = n.apply(e, t || [])).next());
            });
          };
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.DataverseService = void 0);
        const r = o(55);
        t.DataverseService = class {
          getEnvironmentVariableValue(e) {
            return n(this, void 0, void 0, function*() {
              const t = `/api/data/v9.0/RetrieveEnvironmentVariableValue(DefinitionSchemaName='${e}')`,
                o = yield fetch(t);
              return (yield o.json()).Value;
            });
          }
          getAppSetting(e, t) {
            return n(this, void 0, void 0, function*() {
              const o = `/api/data/v9.0/RetrieveSetting(AppUniqueName='${e}',SettingName='${t}')`,
                n = yield fetch(o);
              return yield n.json();
            });
          }
          getSystemUser(e) {
            return n(this, void 0, void 0, function*() {
              const t = yield fetch(`/api/data/v9.0/systemusers(${e})`);
              return yield t.json();
            });
          }
          whoAmI() {
            return n(this, void 0, void 0, function*() {
              const e = yield fetch("/api/data/v9.0/WhoAmI()");
              return yield e.json();
            });
          }
          createDriveItem(e, t) {
            return n(this, void 0, void 0, function*() {
              const o = {
                bhlabs_absoluteurl: e.webUrl ? decodeURI(e.webUrl) : void 0,
                bhlabs_description: e.description || void 0,
                bhlabs_driveid: e.id,
                bhlabs_lastmodifiedon: e.lastModifiedDateTime,
                bhlabs_name: e.name || void 0,
                bhlabs_createdon: e.createdDateTime,
                bhlabs_relativeurl: e.webUrl
                  ? decodeURI(new URL(e.webUrl).pathname)
                  : void 0,
                bhlabs_size: e.size || void 0,
                bhlabs_weburl: e.webUrl || void 0
              };
              t &&
                (o[
                  "bhlabs_ParentDriveItem@odata.bind"
                ] = `/bhlabs_sharepointdriveitems(${t})`);
              const n = yield fetch(
                "/api/data/v9.0/bhlabs_sharepointdriveitems",
                {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                    Prefer: "return=representation"
                  },
                  body: JSON.stringify(o)
                }
              );
              return yield n.json();
            });
          }
          updateMatterRootFolder(e, t) {
            return n(this, void 0, void 0, function*() {
              const o = {
                "bhlabs_RootFolder@odata.bind": `/bhlabs_sharepointdriveitems(${t})`
              };
              yield fetch(`/api/data/v9.0/bhlabs_matters(${e})`, {
                method: "PATCH",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(o)
              });
            });
          }
          updateContractRootFolder(e, t) {
            return n(this, void 0, void 0, function*() {
              const o = {
                "bhlabs_RootFolder@odata.bind": `/bhlabs_sharepointdriveitems(${t})`
              };
              yield fetch(`/api/data/v9.0/bhlabs_contracts(${e})`, {
                method: "PATCH",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(o)
              });
            });
          }
          generateDocument(e) {
            return n(this, void 0, void 0, function*() {
              const t = yield fetch(
                "/api/data/v9.2/bhlabs_GenerateDocumentFromTemplate",
                {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify(e)
                }
              );
              return yield t.json();
            });
          }
          sharePointGetChildDocumentLocations(e) {
            return n(this, void 0, void 0, function*() {
              const t = `/api/data/v9.0/sharepointdocumentlocations?$filter=_parentsiteorlocation_value eq ${e}`,
                o = yield fetch(t);
              return (yield o.json()).value;
            });
          }
          sharePointGetDocumentLocation(e, t, o) {
            return n(this, void 0, void 0, function*() {
              const n = {
                  RegardingId: e,
                  RegardingLogicalName: t,
                  SubFolderPath: o
                },
                r = yield fetch(
                  "/api/data/v9.2/bhlabs_SharePointGetDocumentLocation",
                  {
                    method: "POST",
                    body: JSON.stringify(n),
                    headers: { "Content-Type": "application/json" }
                  }
                );
              return yield r.json();
            });
          }
          sharePointCreateFolder(e, t, o, r) {
            return n(this, void 0, void 0, function*() {
              const n = {
                  RegardingId: t,
                  RegardingLogicalName: o,
                  relativePath: e,
                  relativeParentPath: r
                },
                i = yield fetch(
                  "/api/data/v9.2/bhlabs_SharePointCreateFolder",
                  {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(n)
                  }
                );
              return yield i.json();
            });
          }
          sharePointGetDocuments(e, t) {
            return n(this, void 0, void 0, function*() {
              const o = { DocumentLocationId: e, RecursiveFetch: t },
                n = yield fetch(
                  "/api/data/v9.2/bhlabs_SharePointGetDocuments",
                  {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(o)
                  }
                );
              return (yield n.json()).value;
            });
          }
          sharePointGetPrimaryDocument(e, t) {
            var o;
            return n(this, void 0, void 0, function*() {
              const n = { RegardingId: e, RegardingLogicalName: t },
                r = yield fetch(
                  "/api/data/v9.2/bhlabs_SharePointGetPrimaryDocument",
                  {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(n)
                  }
                ),
                i = yield r.json();
              return (
                (i.embedurl =
                  null === (o = i.readurl) || void 0 === o
                    ? void 0
                    : o.replace("action=view", "action=embedview")),
                i
              );
            });
          }
          sharePointGetPrimaryDocumentStatus(e, t) {
            return n(this, void 0, void 0, function*() {
              const o = { RegardingId: e, RegardingLogicalName: t },
                n = yield fetch(
                  "/api/data/v9.2/bhlabs_SharePointGetPrimaryDocumentStatus",
                  {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(o)
                  }
                );
              return (yield n.json()).Status;
            });
          }
          sharePointUploadFile(e, t, o, r, i) {
            return n(this, void 0, void 0, function*() {
              const n = {
                  FileName: e,
                  FileContent: t,
                  IsPrimary: o,
                  DocumentLocationId: r,
                  Comment: i
                },
                a = yield fetch("/api/data/v9.2/bhlabs_SharePointUploadFile", {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify(n)
                });
              return yield a.json();
            });
          }
          getSharePointChangeNotification(e) {
            return n(this, void 0, void 0, function*() {
              const t = yield this.whoAmI(),
                o = `/api/data/v9.2/bhlabs_sharepointchangenotifications?$filter=bhlabs_regardingid eq '${e}' and _bhlabs_notifyto_value eq '${
                  t.UserId
                }'&$orderby=bhlabs_version asc`,
                n = yield fetch(o, {
                  headers: {
                    Prefer:
                      "odata.include-annotations=OData.Community.Display.V1.FormattedValue"
                  }
                }),
                r = yield n.json();
              if (r && r.value && r.value.length > 0) return r.value[0];
            });
          }
          deleteSharePointChangeNotification(e) {
            return n(this, void 0, void 0, function*() {
              const t = `/api/data/v9.2/bhlabs_sharepointchangenotifications(${e})`;
              yield fetch(t, { method: "DELETE" });
            });
          }
          checkOutDocument(e, t, o, r) {
            var i;
            return n(this, void 0, void 0, function*() {
              const n = {
                  Entity: {
                    "@odata.type": "Microsoft.Dynamics.CRM.sharepointdocument",
                    sharepointdocumentid: `{${e}}`,
                    documentid: t,
                    locationid: o
                  },
                  ParentEntityReference: {
                    "@odata.type": "Microsoft.Dynamics.CRM.bhlabs_contract",
                    bhlabs_contractid: r
                  }
                },
                a = yield fetch("/api/data/v9.0/CheckoutDocument", {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify(n)
                });
              if (!a.ok) {
                const e = yield a.json(),
                  t =
                    null === (i = null == e ? void 0 : e.error) || void 0 === i
                      ? void 0
                      : i.message;
                throw new Error(t);
              }
            });
          }
          checkInDocument(e, t, o, r, i) {
            var a;
            return n(this, void 0, void 0, function*() {
              const n = {
                  Entity: {
                    "@odata.type": "Microsoft.Dynamics.CRM.sharepointdocument",
                    sharepointdocumentid: `{${e}}`,
                    documentid: t,
                    locationid: o
                  },
                  CheckInComments: i,
                  RetainCheckout: !1,
                  ParentEntityReference: {
                    "@odata.type": "Microsoft.Dynamics.CRM.bhlabs_contract",
                    bhlabs_contractid: r
                  }
                },
                s = yield fetch("/api/data/v9.0/CheckInDocument", {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify(n)
                });
              if (!s.ok) {
                const e = yield s.json(),
                  t =
                    null === (a = null == e ? void 0 : e.error) || void 0 === a
                      ? void 0
                      : a.message;
                throw new Error(t);
              }
            });
          }
          pollConsensusAsyncJob(e, t, o, r, i) {
            return n(this, void 0, void 0, function*() {
              setInterval(() => {
                fetch(
                  `/api/data/v9.2/bhlabs_consensusasyncjobs?$filter=bhlab_notify eq true and bhlabs_regardinglogicalname eq '${t}' and bhlabs_regardingid eq '${e}' and bhlabs_isnotified eq false and statuscode eq ${r}`
                ).then(e => {
                  e.json().then(e => {
                    var t;
                    null === (t = e.value) ||
                      void 0 === t ||
                      t.forEach(e => {
                        o(e);
                        fetch(
                          `/api/data/v9.2/bhlabs_consensusasyncjobs(${
                            e.bhlabs_consensusasyncjobid
                          })`,
                          {
                            method: "PATCH",
                            body: JSON.stringify({ bhlabs_isnotified: !0 }),
                            headers: { "Content-Type": "application/json" }
                          }
                        );
                      });
                  });
                });
              }, i || 5e3);
            });
          }
          waitConsensusAsyncJobCompletion(e, t, o) {
            return n(this, void 0, void 0, function*() {
              return yield new Promise((i, a) => {
                let s = 0;
                const c = setInterval(
                  () =>
                    n(this, void 0, void 0, function*() {
                      const t = `/api/data/v9.2/bhlabs_consensusasyncjobs(${e})`,
                        n = yield fetch(t),
                        a = yield n.json();
                      (a.statuscode !== r.ConsensusAsyncJobStatus.Completed &&
                        a.statuscode !== r.ConsensusAsyncJobStatus.Error) ||
                        (i(a), clearInterval(c)),
                        s++,
                        o && o === s && clearInterval(c);
                    }),
                  t || 5
                );
              });
            });
          }
          getSampleChangeManagementAndVersionControl(e) {
            return n(this, void 0, void 0, function*() {
              const t = `/api/data/v9.2/bhlabs_changemanagementandversioncontrols?$filter=_regardingobjectid_value eq ${e}&$top=1`,
                o = yield fetch(t);
              return (yield o.json()).value[0];
            });
          }
          createChangeManagementAndVersionControl(e, t, o, r) {
            return n(this, void 0, void 0, function*() {
              const n = yield this.whoAmI(),
                i = new Date().toISOString();
              var a = {
                "regardingobjectid_bhlabs_contract_bhlabs_changemanagementandversioncontrol@odata.bind": `/bhlabs_contracts(${
                  e._regardingobjectid_value
                })`,
                subject: e.subject,
                bhlabs_filename: e.bhlabs_filename,
                bhlabs_relativepath: e.bhlabs_relativepath,
                bhlabs_sharepointlink: e.bhlabs_sharepointlink,
                bhlabs_version: t,
                bhlabs_additionalnotes: r,
                bhlabs_allthechangesmade: o,
                sortdate: i,
                "bhlabs_SharePointModifiedById_bhlabs_changemanagementandversioncontrol_systemuser@odata.bind": `/systemusers(${
                  n.UserId
                })`
              };
              yield fetch(
                "/api/data/v9.2/bhlabs_changemanagementandversioncontrols",
                {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify(a)
                }
              );
            });
          }
        };
      },
      55: (e, t) => {
        var o, n, r;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ConsensusAsyncJobType = t.ConsensusAsyncJobStatus = t.ConsensusAsyncJobState = void 0),
          (function(e) {
            (e[(e.Active = 0)] = "Active"), (e[(e.Inactive = 1)] = "Inactive");
          })(o || (t.ConsensusAsyncJobState = o = {})),
          (function(e) {
            (e[(e.NotStarted = 1)] = "NotStarted"),
              (e[(e.InProgress = 461880001)] = "InProgress"),
              (e[(e.Completed = 461880004)] = "Completed"),
              (e[(e.Error = 461880003)] = "Error"),
              (e[(e.Closed = 2)] = "Closed");
          })(n || (t.ConsensusAsyncJobStatus = n = {})),
          (function(e) {
            (e[(e.GenerateDocument = 46188e4)] = "GenerateDocument"),
              (e[(e.UploadFile = 461880001)] = "UploadFile"),
              (e[(e.CreateFolder = 461880002)] = "CreateFolder");
          })(r || (t.ConsensusAsyncJobType = r = {}));
      },
      203: (e, t, o) => {
        o.r(t),
          o.d(t, {
            Account: () => Le,
            AuthError: () => _,
            Authority: () => Ae,
            ClientAuthError: () => B,
            ClientConfigurationError: () => fe,
            Constants: () => u,
            CryptoUtils: () => l,
            InteractionRequiredAuthError: () => Be,
            LogLevel: () => Se,
            Logger: () => je,
            ServerError: () => $e,
            ServerHashParamKeys: () => c,
            UrlUtils: () => ve,
            UserAgentApplication: () => Ht,
            WindowUtils: () => De,
            version: () => we
          });
        var n = function(e, t) {
          return (
            (n =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function(e, t) {
                  e.__proto__ = t;
                }) ||
              function(e, t) {
                for (var o in t) t.hasOwnProperty(o) && (e[o] = t[o]);
              }),
            n(e, t)
          );
        };
        function r(e, t) {
          function o() {
            this.constructor = e;
          }
          n(e, t),
            (e.prototype =
              null === t
                ? Object.create(t)
                : ((o.prototype = t.prototype), new o()));
        }
        var i = function() {
          return (
            (i =
              Object.assign ||
              function(e) {
                for (var t, o = 1, n = arguments.length; o < n; o++)
                  for (var r in (t = arguments[o]))
                    Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);
                return e;
              }),
            i.apply(this, arguments)
          );
        };
        function a(e, t, o, n) {
          return new (o || (o = Promise))(function(r, i) {
            function a(e) {
              try {
                c(n.next(e));
              } catch (e) {
                i(e);
              }
            }
            function s(e) {
              try {
                c(n.throw(e));
              } catch (e) {
                i(e);
              }
            }
            function c(e) {
              var t;
              e.done
                ? r(e.value)
                : ((t = e.value),
                  t instanceof o
                    ? t
                    : new o(function(e) {
                        e(t);
                      })).then(a, s);
            }
            c((n = n.apply(e, t || [])).next());
          });
        }
        function s(e, t) {
          var o,
            n,
            r,
            i,
            a = {
              label: 0,
              sent: function() {
                if (1 & r[0]) throw r[1];
                return r[1];
              },
              trys: [],
              ops: []
            };
          return (
            (i = { next: s(0), throw: s(1), return: s(2) }),
            "function" == typeof Symbol &&
              (i[Symbol.iterator] = function() {
                return this;
              }),
            i
          );
          function s(i) {
            return function(s) {
              return (function(i) {
                if (o) throw new TypeError("Generator is already executing.");
                for (; a; )
                  try {
                    if (
                      ((o = 1),
                      n &&
                        (r =
                          2 & i[0]
                            ? n.return
                            : i[0]
                              ? n.throw || ((r = n.return) && r.call(n), 0)
                              : n.next) &&
                        !(r = r.call(n, i[1])).done)
                    )
                      return r;
                    switch (((n = 0), r && (i = [2 & i[0], r.value]), i[0])) {
                      case 0:
                      case 1:
                        r = i;
                        break;
                      case 4:
                        return a.label++, { value: i[1], done: !1 };
                      case 5:
                        a.label++, (n = i[1]), (i = [0]);
                        continue;
                      case 7:
                        (i = a.ops.pop()), a.trys.pop();
                        continue;
                      default:
                        if (
                          !((r = a.trys),
                          (r = r.length > 0 && r[r.length - 1]) ||
                            (6 !== i[0] && 2 !== i[0]))
                        ) {
                          a = 0;
                          continue;
                        }
                        if (
                          3 === i[0] &&
                          (!r || (i[1] > r[0] && i[1] < r[3]))
                        ) {
                          a.label = i[1];
                          break;
                        }
                        if (6 === i[0] && a.label < r[1]) {
                          (a.label = r[1]), (r = i);
                          break;
                        }
                        if (r && a.label < r[2]) {
                          (a.label = r[2]), a.ops.push(i);
                          break;
                        }
                        r[2] && a.ops.pop(), a.trys.pop();
                        continue;
                    }
                    i = t.call(e, a);
                  } catch (e) {
                    (i = [6, e]), (n = 0);
                  } finally {
                    o = r = 0;
                  }
                if (5 & i[0]) throw i[1];
                return { value: i[0] ? i[1] : void 0, done: !0 };
              })([i, s]);
            };
          }
        }
        var c,
          l = (function() {
            function e() {}
            return (
              (e.createNewGuid = function() {
                var t = window.crypto;
                if (t && t.getRandomValues) {
                  var o = new Uint8Array(16);
                  return (
                    t.getRandomValues(o),
                    (o[6] |= 64),
                    (o[6] &= 79),
                    (o[8] |= 128),
                    (o[8] &= 191),
                    e.decimalToHex(o[0]) +
                      e.decimalToHex(o[1]) +
                      e.decimalToHex(o[2]) +
                      e.decimalToHex(o[3]) +
                      "-" +
                      e.decimalToHex(o[4]) +
                      e.decimalToHex(o[5]) +
                      "-" +
                      e.decimalToHex(o[6]) +
                      e.decimalToHex(o[7]) +
                      "-" +
                      e.decimalToHex(o[8]) +
                      e.decimalToHex(o[9]) +
                      "-" +
                      e.decimalToHex(o[10]) +
                      e.decimalToHex(o[11]) +
                      e.decimalToHex(o[12]) +
                      e.decimalToHex(o[13]) +
                      e.decimalToHex(o[14]) +
                      e.decimalToHex(o[15])
                  );
                }
                for (
                  var n = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx",
                    r = "0123456789abcdef",
                    i = 0,
                    a = "",
                    s = 0;
                  s < 36;
                  s++
                )
                  "-" !== n[s] &&
                    "4" !== n[s] &&
                    (i = (16 * Math.random()) | 0),
                    "x" === n[s]
                      ? (a += r[i])
                      : "y" === n[s]
                        ? ((i &= 3), (a += r[(i |= 8)]))
                        : (a += n[s]);
                return a;
              }),
              (e.isGuid = function(e) {
                return /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(
                  e
                );
              }),
              (e.decimalToHex = function(e) {
                for (var t = e.toString(16); t.length < 2; ) t = "0" + t;
                return t;
              }),
              (e.base64Encode = function(e) {
                return btoa(
                  encodeURIComponent(e).replace(/%([0-9A-F]{2})/g, function(
                    e,
                    t
                  ) {
                    return String.fromCharCode(Number("0x" + t));
                  })
                );
              }),
              (e.base64Decode = function(e) {
                var t = e.replace(/-/g, "+").replace(/_/g, "/");
                switch (t.length % 4) {
                  case 0:
                    break;
                  case 2:
                    t += "==";
                    break;
                  case 3:
                    t += "=";
                    break;
                  default:
                    throw new Error("Invalid base64 string");
                }
                return decodeURIComponent(
                  atob(t)
                    .split("")
                    .map(function(e) {
                      return (
                        "%" + ("00" + e.charCodeAt(0).toString(16)).slice(-2)
                      );
                    })
                    .join("")
                );
              }),
              (e.deserialize = function(e) {
                var t,
                  o = /\+/g,
                  n = /([^&=]+)=([^&]*)/g,
                  r = function(e) {
                    return decodeURIComponent(e.replace(o, " "));
                  },
                  i = {};
                for (t = n.exec(e); t; )
                  (i[r(t[1])] = r(t[2])), (t = n.exec(e));
                return i;
              }),
              e
            );
          })(),
          u = (function() {
            function e() {}
            return (
              Object.defineProperty(e, "libraryName", {
                get: function() {
                  return "Msal.js";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "claims", {
                get: function() {
                  return "claims";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "clientId", {
                get: function() {
                  return "clientId";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "adalIdToken", {
                get: function() {
                  return "adal.idtoken";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "cachePrefix", {
                get: function() {
                  return "msal";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "scopes", {
                get: function() {
                  return "scopes";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "no_account", {
                get: function() {
                  return "NO_ACCOUNT";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "upn", {
                get: function() {
                  return "upn";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "domain_hint", {
                get: function() {
                  return "domain_hint";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "prompt_select_account", {
                get: function() {
                  return "&prompt=select_account";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "prompt_none", {
                get: function() {
                  return "&prompt=none";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "prompt", {
                get: function() {
                  return "prompt";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "response_mode_fragment", {
                get: function() {
                  return "&response_mode=fragment";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "resourceDelimiter", {
                get: function() {
                  return "|";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "cacheDelimiter", {
                get: function() {
                  return ".";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "popUpWidth", {
                get: function() {
                  return this._popUpWidth;
                },
                set: function(e) {
                  this._popUpWidth = e;
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "popUpHeight", {
                get: function() {
                  return this._popUpHeight;
                },
                set: function(e) {
                  this._popUpHeight = e;
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "login", {
                get: function() {
                  return "LOGIN";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "renewToken", {
                get: function() {
                  return "RENEW_TOKEN";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "unknown", {
                get: function() {
                  return "UNKNOWN";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "ADFS", {
                get: function() {
                  return "adfs";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "homeAccountIdentifier", {
                get: function() {
                  return "homeAccountIdentifier";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "common", {
                get: function() {
                  return "common";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "openidScope", {
                get: function() {
                  return "openid";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "profileScope", {
                get: function() {
                  return "profile";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "oidcScopes", {
                get: function() {
                  return [this.openidScope, this.profileScope];
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "interactionTypeRedirect", {
                get: function() {
                  return "redirectInteraction";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "interactionTypePopup", {
                get: function() {
                  return "popupInteraction";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "interactionTypeSilent", {
                get: function() {
                  return "silentInteraction";
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e, "inProgress", {
                get: function() {
                  return "inProgress";
                },
                enumerable: !0,
                configurable: !0
              }),
              (e._popUpWidth = 483),
              (e._popUpHeight = 600),
              e
            );
          })();
        !(function(e) {
          (e.SCOPE = "scope"),
            (e.STATE = "state"),
            (e.ERROR = "error"),
            (e.ERROR_DESCRIPTION = "error_description"),
            (e.ACCESS_TOKEN = "access_token"),
            (e.ID_TOKEN = "id_token"),
            (e.EXPIRES_IN = "expires_in"),
            (e.SESSION_STATE = "session_state"),
            (e.CLIENT_INFO = "client_info");
        })(c || (c = {}));
        var h,
          d,
          p,
          g = "id_token",
          f = "token",
          m = "id_token token";
        !(function(e) {
          (e.AUTHORITY = "authority"),
            (e.ACQUIRE_TOKEN_ACCOUNT = "acquireTokenAccount"),
            (e.SESSION_STATE = "session.state"),
            (e.STATE_LOGIN = "state.login"),
            (e.STATE_ACQ_TOKEN = "state.acquireToken"),
            (e.STATE_RENEW = "state.renew"),
            (e.NONCE_IDTOKEN = "nonce.idtoken"),
            (e.LOGIN_REQUEST = "login.request"),
            (e.RENEW_STATUS = "token.renew.status"),
            (e.URL_HASH = "urlHash"),
            (e.INTERACTION_STATUS = "interaction.status"),
            (e.REDIRECT_REQUEST = "redirect_request");
        })(h || (h = {})),
          (function(e) {
            (e.IDTOKEN = "idtoken"), (e.CLIENT_INFO = "client.info");
          })(d || (d = {})),
          (function(e) {
            (e.LOGIN_ERROR = "login.error"),
              (e.ERROR = "error"),
              (e.ERROR_DESC = "error.description");
          })(p || (p = {}));
        var v,
          y = ".well-known/openid-configuration";
        !(function(e) {
          (e.ACCOUNT = "account"),
            (e.SID = "sid"),
            (e.LOGIN_HINT = "login_hint"),
            (e.ORGANIZATIONS = "organizations"),
            (e.CONSUMERS = "consumers"),
            (e.ID_TOKEN = "id_token"),
            (e.ACCOUNT_ID = "accountIdentifier"),
            (e.HOMEACCOUNT_ID = "homeAccountIdentifier");
        })(v || (v = {}));
        var b,
          w = [v.SID, v.LOGIN_HINT],
          T = "GET",
          C = {
            LOGIN: "login",
            SELECT_ACCOUNT: "select_account",
            CONSENT: "consent",
            NONE: "none"
          },
          I = "msalIdTokenFrame",
          S = "msalRenewFrame",
          A = {
            code: "unexpected_error",
            desc: "Unexpected error in authentication."
          },
          E = {
            code: "no_window_object",
            desc: "No window object available. Details:"
          },
          _ = (function(e) {
            function t(o, n) {
              var r = e.call(this, n) || this;
              return (
                Object.setPrototypeOf(r, t.prototype),
                (r.errorCode = o),
                (r.errorMessage = n),
                (r.name = "AuthError"),
                r
              );
            }
            return (
              r(t, e),
              (t.createUnexpectedError = function(e) {
                return new t(A.code, A.desc + ": " + e);
              }),
              (t.createNoWindowObjectError = function(e) {
                return new t(E.code, E.desc + " " + e);
              }),
              t
            );
          })(Error),
          k = (function() {
            function e() {}
            return (
              (e.isEmpty = function(e) {
                return void 0 === e || !e || 0 === e.length;
              }),
              (e.validateAndParseJsonCacheKey = function(e) {
                try {
                  var t = JSON.parse(e);
                  return t && "object" == typeof t ? t : null;
                } catch (e) {
                  return null;
                }
              }),
              e
            );
          })(),
          R = {
            code: "endpoints_resolution_error",
            desc:
              "Error: could not resolve endpoints. Please check network and try again."
          },
          O = {
            code: "popup_window_error",
            desc:
              "Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser."
          },
          P = {
            code: "token_renewal_error",
            desc: "Token renewal operation failed due to timeout."
          },
          N = { code: "invalid_id_token", desc: "Invalid ID token format." },
          x = { code: "invalid_state_error", desc: "Invalid state." },
          L = {
            code: "nonce_mismatch_error",
            desc: "Nonce is not matching, Nonce received: "
          },
          D = {
            code: "login_progress_error",
            desc:
              "Login_In_Progress: Error during login call - login is already in progress."
          },
          U = {
            code: "acquiretoken_progress_error",
            desc:
              "AcquireToken_In_Progress: Error during login call - login is already in progress."
          },
          q = { code: "user_cancelled", desc: "User cancelled the flow." },
          j = {
            code: "callback_error",
            desc: "Error occurred in token received callback function."
          },
          F = {
            code: "user_login_error",
            desc:
              "User login is required. For silent calls, request must contain either sid or login_hint"
          },
          M = {
            code: "user_non_existent",
            desc: "User object does not exist. Please call a login API."
          },
          H = {
            code: "client_info_decoding_error",
            desc:
              "The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause."
          },
          V = {
            code: "client_info_not_populated_error",
            desc:
              "The service did not populate client_info in the response, Please verify with the service team"
          },
          K = {
            code: "null_or_empty_id_token",
            desc:
              "The idToken is null or empty. Please review the trace to determine the root cause."
          },
          G = {
            code: "id_token_parsing_error",
            desc:
              "ID token cannot be parsed. Please review stack trace to determine root cause."
          },
          $ = {
            code: "token_encoding_error",
            desc: "The token to be decoded is not encoded correctly."
          },
          W = {
            code: "invalid_interaction_type",
            desc:
              "The interaction type passed to the handler was incorrect or unknown"
          },
          J = {
            code: "cannot_parse_cache",
            desc:
              "The cached token key is not a valid JSON and cannot be parsed"
          },
          z = {
            code: "block_token_requests",
            desc: "Token calls are blocked in hidden iframes"
          },
          B = (function(e) {
            function t(o, n) {
              var r = e.call(this, o, n) || this;
              return (
                (r.name = "ClientAuthError"),
                Object.setPrototypeOf(r, t.prototype),
                r
              );
            }
            return (
              r(t, e),
              (t.createEndpointResolutionError = function(e) {
                var o = R.desc;
                return (
                  e && !k.isEmpty(e) && (o += " Details: " + e),
                  new t(R.code, o)
                );
              }),
              (t.createPopupWindowError = function(e) {
                var o = O.desc;
                return (
                  e && !k.isEmpty(e) && (o += " Details: " + e),
                  new t(O.code, o)
                );
              }),
              (t.createTokenRenewalTimeoutError = function() {
                return new t(P.code, P.desc);
              }),
              (t.createInvalidIdTokenError = function(e) {
                return new t(N.code, N.desc + " Given token: " + e);
              }),
              (t.createInvalidStateError = function(e, o) {
                return new t(
                  x.code,
                  x.desc + " " + e + ", state expected : " + o + "."
                );
              }),
              (t.createNonceMismatchError = function(e, o) {
                return new t(
                  L.code,
                  L.desc + " " + e + ", nonce expected : " + o + "."
                );
              }),
              (t.createLoginInProgressError = function() {
                return new t(D.code, D.desc);
              }),
              (t.createAcquireTokenInProgressError = function() {
                return new t(U.code, U.desc);
              }),
              (t.createUserCancelledError = function() {
                return new t(q.code, q.desc);
              }),
              (t.createErrorInCallbackFunction = function(e) {
                return new t(j.code, j.desc + " " + e + ".");
              }),
              (t.createUserLoginRequiredError = function() {
                return new t(F.code, F.desc);
              }),
              (t.createUserDoesNotExistError = function() {
                return new t(M.code, M.desc);
              }),
              (t.createClientInfoDecodingError = function(e) {
                return new t(H.code, H.desc + " Failed with error: " + e);
              }),
              (t.createClientInfoNotPopulatedError = function(e) {
                return new t(V.code, V.desc + " Failed with error: " + e);
              }),
              (t.createIdTokenNullOrEmptyError = function(e) {
                return new t(K.code, K.desc + " Raw ID Token Value: " + e);
              }),
              (t.createIdTokenParsingError = function(e) {
                return new t(G.code, G.desc + " Failed with error: " + e);
              }),
              (t.createTokenEncodingError = function(e) {
                return new t($.code, $.desc + " Attempted to decode: " + e);
              }),
              (t.createInvalidInteractionTypeError = function() {
                return new t(W.code, W.desc);
              }),
              (t.createCacheParseError = function(e) {
                var o = "invalid key: " + e + ", " + J.desc;
                return new t(J.code, o);
              }),
              (t.createBlockTokenRequestsInHiddenIframeError = function() {
                return new t(z.code, z.desc);
              }),
              t
            );
          })(_),
          Q = {
            code: "no_config_set",
            desc:
              "Configuration has not been set. Please call the UserAgentApplication constructor with a valid Configuration object."
          },
          X = {
            code: "storage_not_supported",
            desc: "The value for the cacheLocation is not supported."
          },
          Y = {
            code: "no_redirect_callbacks",
            desc:
              "No redirect callbacks have been set. Please call handleRedirectCallback() with the appropriate function arguments before continuing. More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics."
          },
          Z = {
            code: "invalid_callback_object",
            desc:
              "The object passed for the callback was invalid. More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics."
          },
          ee = {
            code: "scopes_required",
            desc: "Scopes are required to obtain an access token."
          },
          te = {
            code: "empty_input_scopes_error",
            desc: "Scopes cannot be passed as empty array."
          },
          oe = {
            code: "nonarray_input_scopes_error",
            desc: "Scopes cannot be passed as non-array."
          },
          ne = {
            code: "invalid_prompt_value",
            desc:
              "Supported prompt values are 'login', 'select_account', 'consent' and 'none'"
          },
          re = {
            code: "invalid_authority_type",
            desc:
              "The given authority is not a valid type of authority supported by MSAL. Please see here for valid authorities: <insert URL here>."
          },
          ie = {
            code: "authority_uri_insecure",
            desc: "Authority URIs must use https."
          },
          ae = {
            code: "authority_uri_invalid_path",
            desc: "Given authority URI is invalid."
          },
          se = {
            code: "untrusted_authority",
            desc:
              "The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter or set validateAuthority=false."
          },
          ce = {
            code: "b2c_known_authorities_not_set",
            desc:
              "Must set known authorities when validateAuthority is set to True and using B2C"
          },
          le = {
            code: "claims_request_parsing_error",
            desc: "Could not parse the given claims request object."
          },
          ue = {
            code: "empty_request_error",
            desc: "Request object is required."
          },
          he = {
            code: "invalid_guid_sent_as_correlationId",
            desc: "Please set the correlationId as a valid guid"
          },
          de = {
            code: "telemetry_config_error",
            desc: "Telemetry config is not configured with required values"
          },
          pe = {
            code: "sso_silent_error",
            desc: "request must contain either sid or login_hint"
          },
          ge = {
            code: "authority_metadata_error",
            desc:
              "Invalid authorityMetadata. Must be a JSON object containing authorization_endpoint, end_session_endpoint, and issuer fields."
          },
          fe = (function(e) {
            function t(o, n) {
              var r = e.call(this, o, n) || this;
              return (
                (r.name = "ClientConfigurationError"),
                Object.setPrototypeOf(r, t.prototype),
                r
              );
            }
            return (
              r(t, e),
              (t.createNoSetConfigurationError = function() {
                return new t(Q.code, "" + Q.desc);
              }),
              (t.createStorageNotSupportedError = function(e) {
                return new t(X.code, X.desc + " Given location: " + e);
              }),
              (t.createRedirectCallbacksNotSetError = function() {
                return new t(Y.code, Y.desc);
              }),
              (t.createInvalidCallbackObjectError = function(e) {
                return new t(
                  Z.code,
                  Z.desc + " Given value for callback function: " + e
                );
              }),
              (t.createEmptyScopesArrayError = function(e) {
                return new t(te.code, te.desc + " Given value: " + e + ".");
              }),
              (t.createScopesNonArrayError = function(e) {
                return new t(oe.code, oe.desc + " Given value: " + e + ".");
              }),
              (t.createScopesRequiredError = function(e) {
                return new t(ee.code, ee.desc + " Given value: " + e);
              }),
              (t.createInvalidPromptError = function(e) {
                return new t(ne.code, ne.desc + " Given value: " + e);
              }),
              (t.createClaimsRequestParsingError = function(e) {
                return new t(le.code, le.desc + " Given value: " + e);
              }),
              (t.createEmptyRequestError = function() {
                var e = ue;
                return new t(e.code, e.desc);
              }),
              (t.createInvalidCorrelationIdError = function() {
                return new t(he.code, he.desc);
              }),
              (t.createKnownAuthoritiesNotSetError = function() {
                return new t(ce.code, ce.desc);
              }),
              (t.createInvalidAuthorityTypeError = function() {
                return new t(re.code, re.desc);
              }),
              (t.createUntrustedAuthorityError = function(e) {
                return new t(se.code, se.desc + " Provided Authority: " + e);
              }),
              (t.createTelemetryConfigError = function(e) {
                var o = de,
                  n = o.code,
                  r = o.desc,
                  i = {
                    applicationName: "string",
                    applicationVersion: "string",
                    telemetryEmitter: "function"
                  };
                return new t(
                  n,
                  r +
                    " mising values: " +
                    Object.keys(i)
                      .reduce(function(t, o) {
                        return e[o] ? t : t.concat([o + " (" + i[o] + ")"]);
                      }, [])
                      .join(",")
                );
              }),
              (t.createSsoSilentError = function() {
                return new t(pe.code, pe.desc);
              }),
              (t.createInvalidAuthorityMetadataError = function() {
                return new t(ge.code, ge.desc);
              }),
              t
            );
          })(B),
          me = (function() {
            function e() {}
            return (
              (e.isIntersectingScopes = function(e, t) {
                for (
                  var o = this.trimAndConvertArrayToLowerCase(e.slice()),
                    n = this.trimAndConvertArrayToLowerCase(t.slice()),
                    r = 0;
                  r < n.length;
                  r++
                )
                  if (o.indexOf(n[r].toLowerCase()) > -1) return !0;
                return !1;
              }),
              (e.containsScope = function(e, t) {
                var o = this.trimAndConvertArrayToLowerCase(e.slice());
                return this.trimAndConvertArrayToLowerCase(t.slice()).every(
                  function(e) {
                    return o.indexOf(e.toString().toLowerCase()) >= 0;
                  }
                );
              }),
              (e.trimAndConvertToLowerCase = function(e) {
                return e.trim().toLowerCase();
              }),
              (e.trimAndConvertArrayToLowerCase = function(e) {
                var t = this;
                return e.map(function(e) {
                  return t.trimAndConvertToLowerCase(e);
                });
              }),
              (e.trimScopes = function(e) {
                return e.map(function(e) {
                  return e.trim();
                });
              }),
              (e.removeElement = function(e, t) {
                var o = this.trimAndConvertToLowerCase(t);
                return e.filter(function(e) {
                  return e !== o;
                });
              }),
              (e.parseScope = function(e) {
                var t = "";
                if (e)
                  for (var o = 0; o < e.length; ++o)
                    t += o !== e.length - 1 ? e[o] + " " : e[o];
                return t;
              }),
              (e.validateInputScope = function(e, t) {
                if (e) {
                  if (!Array.isArray(e)) throw fe.createScopesNonArrayError(e);
                  if (e.length < 1 && t)
                    throw fe.createEmptyScopesArrayError(e.toString());
                } else if (t) throw fe.createScopesRequiredError(e);
              }),
              (e.getScopeFromState = function(e) {
                if (e) {
                  var t = e.indexOf(u.resourceDelimiter);
                  if (t > -1 && t + 1 < e.length) return e.substring(t + 1);
                }
                return "";
              }),
              (e.appendScopes = function(e, t) {
                if (e) {
                  var o = t
                      ? this.trimAndConvertArrayToLowerCase(t.slice())
                      : null,
                    n = this.trimAndConvertArrayToLowerCase(e.slice());
                  return o ? n.concat(o) : n;
                }
                return null;
              }),
              (e.onlyContainsOidcScopes = function(e) {
                var t = e.length,
                  o = 0;
                return (
                  e.indexOf(u.openidScope) > -1 && (o += 1),
                  e.indexOf(u.profileScope) > -1 && (o += 1),
                  t > 0 && t === o
                );
              }),
              (e.containsAnyOidcScopes = function(e) {
                var t = e.indexOf(u.openidScope) > -1,
                  o = e.indexOf(u.profileScope) > -1;
                return t || o;
              }),
              (e.onlyContainsClientId = function(e, t) {
                return !!e && e.indexOf(t) > -1 && 1 === e.length;
              }),
              (e.appendDefaultScopes = function(e) {
                var t = e;
                return (
                  -1 === t.indexOf(u.openidScope) && t.push(u.openidScope),
                  -1 === t.indexOf(u.profileScope) && t.push(u.profileScope),
                  t
                );
              }),
              (e.removeDefaultScopes = function(e) {
                return e.filter(function(e) {
                  return e !== u.openidScope && e !== u.profileScope;
                });
              }),
              (e.translateClientIdIfSingleScope = function(e, t) {
                return this.onlyContainsClientId(e, t) ? u.oidcScopes : e;
              }),
              e
            );
          })(),
          ve = (function() {
            function e() {}
            return (
              (e.createNavigateUrl = function(e) {
                var t = this.createNavigationUrlString(e),
                  o = e.authorityInstance.AuthorizationEndpoint;
                return (
                  o.indexOf("?") < 0 ? (o += "?") : (o += "&"),
                  "" + o + t.join("&")
                );
              }),
              (e.createNavigationUrlString = function(e) {
                var t = me.appendDefaultScopes(e.scopes),
                  o = [];
                return (
                  o.push("response_type=" + e.responseType),
                  o.push("scope=" + encodeURIComponent(me.parseScope(t))),
                  o.push("client_id=" + encodeURIComponent(e.clientId)),
                  o.push("redirect_uri=" + encodeURIComponent(e.redirectUri)),
                  o.push("state=" + encodeURIComponent(e.state)),
                  o.push("nonce=" + encodeURIComponent(e.nonce)),
                  o.push("client_info=1"),
                  o.push("x-client-SKU=" + e.xClientSku),
                  o.push("x-client-Ver=" + e.xClientVer),
                  e.promptValue &&
                    o.push("prompt=" + encodeURIComponent(e.promptValue)),
                  e.claimsValue &&
                    o.push("claims=" + encodeURIComponent(e.claimsValue)),
                  e.queryParameters && o.push(e.queryParameters),
                  e.extraQueryParameters && o.push(e.extraQueryParameters),
                  o.push(
                    "client-request-id=" + encodeURIComponent(e.correlationId)
                  ),
                  o
                );
              }),
              (e.getCurrentUrl = function() {
                return window.location.href.split("?")[0].split("#")[0];
              }),
              (e.removeHashFromUrl = function(e) {
                return e.split("#")[0];
              }),
              (e.replaceTenantPath = function(e, t) {
                var o = e.toLowerCase(),
                  n = this.GetUrlComponents(o),
                  r = n.PathSegments;
                return (
                  !t ||
                    0 === r.length ||
                    (r[0] !== u.common &&
                      r[0] !== v.ORGANIZATIONS &&
                      r[0] !== v.CONSUMERS) ||
                    (r[0] = t),
                  this.constructAuthorityUriFromObject(n, r)
                );
              }),
              (e.constructAuthorityUriFromObject = function(e, t) {
                return this.CanonicalizeUri(
                  e.Protocol + "//" + e.HostNameAndPort + "/" + t.join("/")
                );
              }),
              (e.isCommonAuthority = function(e) {
                var t = this.CanonicalizeUri(e),
                  o = this.GetUrlComponents(t).PathSegments;
                return 0 !== o.length && o[0] === u.common;
              }),
              (e.isOrganizationsAuthority = function(e) {
                var t = this.CanonicalizeUri(e),
                  o = this.GetUrlComponents(t).PathSegments;
                return 0 !== o.length && o[0] === v.ORGANIZATIONS;
              }),
              (e.isConsumersAuthority = function(e) {
                var t = this.CanonicalizeUri(e),
                  o = this.GetUrlComponents(t).PathSegments;
                return 0 !== o.length && o[0] === v.CONSUMERS;
              }),
              (e.GetUrlComponents = function(e) {
                if (!e) throw "Url required";
                var t = RegExp(
                    "^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?"
                  ),
                  o = e.match(t);
                if (!o || o.length < 6) throw "Valid url required";
                var n = {
                    Protocol: o[1],
                    HostNameAndPort: o[4],
                    AbsolutePath: o[5]
                  },
                  r = n.AbsolutePath.split("/");
                return (
                  (r = r.filter(function(e) {
                    return e && e.length > 0;
                  })),
                  (n.PathSegments = r),
                  o[6] && (n.Search = o[6]),
                  o[8] && (n.Hash = o[8]),
                  n
                );
              }),
              (e.CanonicalizeUri = function(t) {
                if (t) {
                  var o = t.toLowerCase();
                  return e.endsWith(o, "/") || (o += "/"), o;
                }
                return t;
              }),
              (e.endsWith = function(e, t) {
                return !(!e || !t) && -1 !== e.indexOf(t, e.length - t.length);
              }),
              (e.urlRemoveQueryStringParameter = function(e, t) {
                if (k.isEmpty(e)) return e;
                var o = new RegExp("(\\&" + t + "=)[^&]+");
                return (
                  e.replace(o, ""),
                  (o = new RegExp("(" + t + "=)[^&]+&")),
                  e.replace(o, ""),
                  (o = new RegExp("(" + t + "=)[^&]+")),
                  e.replace(o, "")
                );
              }),
              (e.getHashFromUrl = function(e) {
                var t = e.indexOf("#"),
                  o = e.indexOf("#/");
                return o > -1
                  ? e.substring(o + 2)
                  : t > -1 ? e.substring(t + 1) : e;
              }),
              (e.urlContainsHash = function(t) {
                var o = e.deserializeHash(t);
                return (
                  o.hasOwnProperty(c.ERROR_DESCRIPTION) ||
                  o.hasOwnProperty(c.ERROR) ||
                  o.hasOwnProperty(c.ACCESS_TOKEN) ||
                  o.hasOwnProperty(c.ID_TOKEN)
                );
              }),
              (e.deserializeHash = function(t) {
                var o = e.getHashFromUrl(t);
                return l.deserialize(o);
              }),
              (e.getHostFromUri = function(e) {
                var t = String(e).replace(/^(https?:)\/\//, "");
                return (t = t.split("/")[0]);
              }),
              e
            );
          })(),
          ye = function(e, t, o, n, r) {
            (this.authority = ve.CanonicalizeUri(e)),
              (this.clientId = t),
              (this.scopes = o),
              (this.homeAccountIdentifier =
                l.base64Encode(n) + "." + l.base64Encode(r));
          },
          be = function(e, t, o, n) {
            (this.accessToken = e),
              (this.idToken = t),
              (this.expiresIn = o),
              (this.homeAccountIdentifier = n);
          },
          we = "1.4.14",
          Te = (function() {
            function e(e, t, o, n, r, i, a) {
              (this.authorityInstance = e),
                (this.clientId = t),
                (this.nonce = l.createNewGuid()),
                (this.scopes = r ? r.slice() : u.oidcScopes),
                (this.scopes = me.trimScopes(this.scopes)),
                (this.state = i),
                (this.correlationId = a),
                (this.xClientSku = "MSAL.JS"),
                (this.xClientVer = we),
                (this.responseType = o),
                (this.redirectUri = n);
            }
            return (
              Object.defineProperty(e.prototype, "authority", {
                get: function() {
                  return this.authorityInstance
                    ? this.authorityInstance.CanonicalAuthority
                    : null;
                },
                enumerable: !0,
                configurable: !0
              }),
              (e.prototype.populateQueryParams = function(t, o, n, r) {
                var i = {};
                o &&
                  (o.prompt && (this.promptValue = o.prompt),
                  o.claimsRequest && (this.claimsValue = o.claimsRequest),
                  e.isSSOParam(o) &&
                    (i = this.constructUnifiedCacheQueryParameter(o, null))),
                  n && (i = this.constructUnifiedCacheQueryParameter(null, n)),
                  (i = this.addHintParameters(t, i));
                var a = o ? o.extraQueryParameters : null;
                (this.queryParameters = e.generateQueryParametersString(i)),
                  (this.extraQueryParameters = e.generateQueryParametersString(
                    a,
                    r
                  ));
              }),
              (e.prototype.constructUnifiedCacheQueryParameter = function(
                e,
                t
              ) {
                var o, n;
                if (e)
                  if (e.account) {
                    var r = e.account;
                    r.sid
                      ? ((o = v.SID), (n = r.sid))
                      : r.userName && ((o = v.LOGIN_HINT), (n = r.userName));
                  } else
                    e.sid
                      ? ((o = v.SID), (n = e.sid))
                      : e.loginHint && ((o = v.LOGIN_HINT), (n = e.loginHint));
                else
                  t &&
                    t.hasOwnProperty(u.upn) &&
                    ((o = v.ID_TOKEN), (n = t.upn));
                return this.addSSOParameter(o, n);
              }),
              (e.prototype.addHintParameters = function(e, t) {
                var o = t;
                e &&
                  !o[v.SID] &&
                  (!o[v.LOGIN_HINT] && e.sid && this.promptValue === C.NONE
                    ? (o = this.addSSOParameter(v.SID, e.sid, o))
                    : !o[v.LOGIN_HINT] &&
                      e.userName &&
                      !k.isEmpty(e.userName) &&
                      (o = this.addSSOParameter(v.LOGIN_HINT, e.userName, o)));
                return o;
              }),
              (e.prototype.addSSOParameter = function(e, t, o) {
                var n = o || {};
                if (!t) return n;
                switch (e) {
                  case v.SID:
                    n[v.SID] = t;
                    break;
                  case v.ID_TOKEN:
                  case v.LOGIN_HINT:
                    n[v.LOGIN_HINT] = t;
                }
                return n;
              }),
              (e.generateQueryParametersString = function(e, t) {
                var o = null;
                return (
                  e &&
                    Object.keys(e).forEach(function(n) {
                      (n === u.domain_hint && (t || e[v.SID])) ||
                        (o
                          ? (o += "&" + n + "=" + encodeURIComponent(e[n]))
                          : (o = n + "=" + encodeURIComponent(e[n])));
                    }),
                  o
                );
              }),
              (e.isSSOParam = function(e) {
                return !(!e || !(e.account || e.sid || e.loginHint));
              }),
              (e.determineResponseType = function(e, t) {
                return me.onlyContainsOidcScopes(t)
                  ? g
                  : e ? this.responseTypeForMatchingAccounts(t) : m;
              }),
              (e.responseTypeForMatchingAccounts = function(e) {
                return me.containsAnyOidcScopes(e) ? m : f;
              }),
              e
            );
          })(),
          Ce = (function() {
            function e() {}
            return (
              (e.prototype.sendRequestAsync = function(e, t, o) {
                var n = this;
                return new Promise(function(o, r) {
                  var i = new XMLHttpRequest();
                  if (
                    (i.open(t, e, !0),
                    (i.onload = function() {
                      var e;
                      (i.status < 200 || i.status >= 300) &&
                        r(n.handleError(i.responseText));
                      try {
                        e = JSON.parse(i.responseText);
                      } catch (e) {
                        r(n.handleError(i.responseText));
                      }
                      var t = { statusCode: i.status, body: e };
                      o(t);
                    }),
                    (i.onerror = function() {
                      r(i.status);
                    }),
                    t !== T)
                  )
                    throw "not implemented";
                  i.send();
                });
              }),
              (e.prototype.handleError = function(e) {
                var t;
                try {
                  if ((t = JSON.parse(e)).error) return t.error;
                  throw e;
                } catch (t) {
                  return e;
                }
              }),
              e
            );
          })(),
          Ie = (function() {
            function e() {}
            return (
              (e.setTrustedAuthoritiesFromConfig = function(t, o) {
                t &&
                  !this.getTrustedHostList().length &&
                  o.forEach(function(t) {
                    e.TrustedHostList.push(t.toLowerCase());
                  });
              }),
              (e.getAliases = function(e, t, o) {
                return a(this, void 0, void 0, function() {
                  var n, r, i, a;
                  return s(this, function(s) {
                    return (
                      (n = new Ce()),
                      (r = T),
                      (i =
                        "https://login.microsoftonline.com/common//discovery/instance?api-version=1.1&authorization_endpoint=" +
                        e +
                        "oauth2/v2.0/authorize"),
                      (a = t.createAndStartHttpEvent(o, r, i, "getAliases")),
                      [
                        2,
                        n
                          .sendRequestAsync(i, r, !0)
                          .then(function(e) {
                            return (
                              (a.httpResponseStatus = e.statusCode),
                              t.stopEvent(a),
                              e.body.metadata
                            );
                          })
                          .catch(function(e) {
                            throw ((a.serverErrorCode = e), t.stopEvent(a), e);
                          })
                      ]
                    );
                  });
                });
              }),
              (e.setTrustedAuthoritiesFromNetwork = function(t, o, n) {
                return a(this, void 0, void 0, function() {
                  var r;
                  return s(this, function(i) {
                    switch (i.label) {
                      case 0:
                        return [4, this.getAliases(t, o, n)];
                      case 1:
                        return (
                          i.sent().forEach(function(t) {
                            t.aliases.forEach(function(t) {
                              e.TrustedHostList.push(t.toLowerCase());
                            });
                          }),
                          (r = ve.GetUrlComponents(t).HostNameAndPort),
                          e.getTrustedHostList().length &&
                            !e.IsInTrustedHostList(r) &&
                            e.TrustedHostList.push(r.toLowerCase()),
                          [2]
                        );
                    }
                  });
                });
              }),
              (e.getTrustedHostList = function() {
                return this.TrustedHostList;
              }),
              (e.IsInTrustedHostList = function(e) {
                return this.TrustedHostList.indexOf(e.toLowerCase()) > -1;
              }),
              (e.TrustedHostList = []),
              e
            );
          })();
        !(function(e) {
          (e[(e.Default = 0)] = "Default"), (e[(e.Adfs = 1)] = "Adfs");
        })(b || (b = {}));
        var Se,
          Ae = (function() {
            function e(e, t, o) {
              (this.IsValidationEnabled = t),
                (this.CanonicalAuthority = e),
                this.validateAsUri(),
                (this.tenantDiscoveryResponse = o);
            }
            return (
              (e.isAdfs = function(e) {
                var t = ve.GetUrlComponents(e).PathSegments;
                return t.length && t[0].toLowerCase() === u.ADFS;
              }),
              Object.defineProperty(e.prototype, "AuthorityType", {
                get: function() {
                  return e.isAdfs(this.canonicalAuthority) ? b.Adfs : b.Default;
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e.prototype, "Tenant", {
                get: function() {
                  return this.CanonicalAuthorityUrlComponents.PathSegments[0];
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e.prototype, "AuthorizationEndpoint", {
                get: function() {
                  return (
                    this.validateResolved(),
                    this.tenantDiscoveryResponse.AuthorizationEndpoint.replace(
                      /{tenant}|{tenantid}/g,
                      this.Tenant
                    )
                  );
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e.prototype, "EndSessionEndpoint", {
                get: function() {
                  return (
                    this.validateResolved(),
                    this.tenantDiscoveryResponse.EndSessionEndpoint.replace(
                      /{tenant}|{tenantid}/g,
                      this.Tenant
                    )
                  );
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e.prototype, "SelfSignedJwtAudience", {
                get: function() {
                  return (
                    this.validateResolved(),
                    this.tenantDiscoveryResponse.Issuer.replace(
                      /{tenant}|{tenantid}/g,
                      this.Tenant
                    )
                  );
                },
                enumerable: !0,
                configurable: !0
              }),
              (e.prototype.validateResolved = function() {
                if (!this.hasCachedMetadata())
                  throw "Please call ResolveEndpointsAsync first";
              }),
              Object.defineProperty(e.prototype, "CanonicalAuthority", {
                get: function() {
                  return this.canonicalAuthority;
                },
                set: function(e) {
                  (this.canonicalAuthority = ve.CanonicalizeUri(e)),
                    (this.canonicalAuthorityUrlComponents = null);
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(
                e.prototype,
                "CanonicalAuthorityUrlComponents",
                {
                  get: function() {
                    return (
                      this.canonicalAuthorityUrlComponents ||
                        (this.canonicalAuthorityUrlComponents = ve.GetUrlComponents(
                          this.CanonicalAuthority
                        )),
                      this.canonicalAuthorityUrlComponents
                    );
                  },
                  enumerable: !0,
                  configurable: !0
                }
              ),
              Object.defineProperty(
                e.prototype,
                "DefaultOpenIdConfigurationEndpoint",
                {
                  get: function() {
                    return this.AuthorityType === b.Adfs
                      ? "" + this.CanonicalAuthority + y
                      : this.CanonicalAuthority + "v2.0/" + y;
                  },
                  enumerable: !0,
                  configurable: !0
                }
              ),
              (e.prototype.validateAsUri = function() {
                var e;
                try {
                  e = this.CanonicalAuthorityUrlComponents;
                } catch (e) {
                  throw re;
                }
                if (!e.Protocol || "https:" !== e.Protocol.toLowerCase())
                  throw ie;
                if (!e.PathSegments || e.PathSegments.length < 1) throw ae;
              }),
              (e.prototype.DiscoverEndpoints = function(e, t, o) {
                var n = new Ce(),
                  r = T,
                  i = t.createAndStartHttpEvent(
                    o,
                    r,
                    e,
                    "openIdConfigurationEndpoint"
                  );
                return n
                  .sendRequestAsync(e, r, !0)
                  .then(function(e) {
                    return (
                      (i.httpResponseStatus = e.statusCode),
                      t.stopEvent(i),
                      {
                        AuthorizationEndpoint: e.body.authorization_endpoint,
                        EndSessionEndpoint: e.body.end_session_endpoint,
                        Issuer: e.body.issuer
                      }
                    );
                  })
                  .catch(function(e) {
                    throw ((i.serverErrorCode = e), t.stopEvent(i), e);
                  });
              }),
              (e.prototype.resolveEndpointsAsync = function(e, t) {
                return a(this, void 0, void 0, function() {
                  var o, n, r;
                  return s(this, function(i) {
                    switch (i.label) {
                      case 0:
                        return this.IsValidationEnabled
                          ? ((o = this.canonicalAuthorityUrlComponents
                              .HostNameAndPort),
                            0 !== Ie.getTrustedHostList().length
                              ? [3, 2]
                              : [
                                  4,
                                  Ie.setTrustedAuthoritiesFromNetwork(
                                    this.canonicalAuthority,
                                    e,
                                    t
                                  )
                                ])
                          : [3, 3];
                      case 1:
                        i.sent(), (i.label = 2);
                      case 2:
                        if (!Ie.IsInTrustedHostList(o))
                          throw fe.createUntrustedAuthorityError(o);
                        i.label = 3;
                      case 3:
                        return (
                          (n = this.GetOpenIdConfigurationEndpoint()),
                          (r = this),
                          [4, this.DiscoverEndpoints(n, e, t)]
                        );
                      case 4:
                        return (
                          (r.tenantDiscoveryResponse = i.sent()),
                          [2, this.tenantDiscoveryResponse]
                        );
                    }
                  });
                });
              }),
              (e.prototype.hasCachedMetadata = function() {
                return !!(
                  this.tenantDiscoveryResponse &&
                  this.tenantDiscoveryResponse.AuthorizationEndpoint &&
                  this.tenantDiscoveryResponse.EndSessionEndpoint &&
                  this.tenantDiscoveryResponse.Issuer
                );
              }),
              (e.prototype.GetOpenIdConfigurationEndpoint = function() {
                return this.DefaultOpenIdConfigurationEndpoint;
              }),
              e
            );
          })(),
          Ee = (function() {
            function e(t, o) {
              if (!t || k.isEmpty(t))
                return (this.uid = ""), void (this.utid = "");
              try {
                var n = l.base64Decode(t),
                  r = JSON.parse(n);
                r &&
                  (r.hasOwnProperty("uid") &&
                    (this.uid = o ? e.stripPolicyFromUid(r.uid, o) : r.uid),
                  r.hasOwnProperty("utid") && (this.utid = r.utid));
              } catch (e) {
                throw B.createClientInfoDecodingError(e);
              }
            }
            return (
              Object.defineProperty(e.prototype, "uid", {
                get: function() {
                  return this._uid ? this._uid : "";
                },
                set: function(e) {
                  this._uid = e;
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e.prototype, "utid", {
                get: function() {
                  return this._utid ? this._utid : "";
                },
                set: function(e) {
                  this._utid = e;
                },
                enumerable: !0,
                configurable: !0
              }),
              (e.createClientInfoFromIdToken = function(t, o) {
                var n = { uid: t.subject, utid: "" };
                return new e(l.base64Encode(JSON.stringify(n)), o);
              }),
              (e.stripPolicyFromUid = function(e, t) {
                var o = e.split("-"),
                  n = t.split("/").reverse(),
                  r = "";
                return (
                  k.isEmpty(n[0]) ? n.length > 1 && (r = n[1]) : (r = n[0]),
                  o[o.length - 1] === r ? o.slice(0, o.length - 1).join("-") : e
                );
              }),
              (e.prototype.encodeClientInfo = function() {
                var e = JSON.stringify({ uid: this.uid, utid: this.utid });
                return l.base64Encode(e);
              }),
              e
            );
          })(),
          _e = (function() {
            function e() {}
            return (
              (e.parseExpiresIn = function(e) {
                return parseInt(e || "3599", 10);
              }),
              (e.now = function() {
                return Math.round(new Date().getTime() / 1e3);
              }),
              (e.relativeNowMs = function() {
                return window.performance.now();
              }),
              e
            );
          })(),
          ke = (function() {
            function e() {}
            return (
              (e.decodeJwt = function(e) {
                if (k.isEmpty(e)) return null;
                var t = /^([^\.\s]*)\.([^\.\s]+)\.([^\.\s]*)$/.exec(e);
                return !t || t.length < 4
                  ? null
                  : { header: t[1], JWSPayload: t[2], JWSSig: t[3] };
              }),
              (e.validateExpirationIsWithinOffset = function(e, t) {
                var o = t || 300;
                return e && e > _e.now() + o;
              }),
              (e.extractIdToken = function(e) {
                var t = this.decodeJwt(e);
                if (!t) return null;
                try {
                  var o = t.JWSPayload,
                    n = l.base64Decode(o);
                  return n ? JSON.parse(n) : null;
                } catch (e) {}
                return null;
              }),
              e
            );
          })(),
          Re = function(e) {
            if (k.isEmpty(e)) throw B.createIdTokenNullOrEmptyError(e);
            try {
              (this.rawIdToken = e),
                (this.claims = ke.extractIdToken(e)),
                this.claims &&
                  (this.claims.hasOwnProperty("iss") &&
                    (this.issuer = this.claims.iss),
                  this.claims.hasOwnProperty("oid") &&
                    (this.objectId = this.claims.oid),
                  this.claims.hasOwnProperty("sub") &&
                    (this.subject = this.claims.sub),
                  this.claims.hasOwnProperty("tid") &&
                    (this.tenantId = this.claims.tid),
                  this.claims.hasOwnProperty("ver") &&
                    (this.version = this.claims.ver),
                  this.claims.hasOwnProperty("preferred_username")
                    ? (this.preferredName = this.claims.preferred_username)
                    : this.claims.hasOwnProperty("upn") &&
                      (this.preferredName = this.claims.upn),
                  this.claims.hasOwnProperty("name") &&
                    (this.name = this.claims.name),
                  this.claims.hasOwnProperty("nonce") &&
                    (this.nonce = this.claims.nonce),
                  this.claims.hasOwnProperty("exp") &&
                    (this.expiration = this.claims.exp),
                  this.claims.hasOwnProperty("home_oid") &&
                    (this.homeObjectId = this.claims.home_oid),
                  this.claims.hasOwnProperty("sid") &&
                    (this.sid = this.claims.sid),
                  this.claims.hasOwnProperty("cloud_instance_host_name") &&
                    (this.cloudInstance = this.claims.cloud_instance_host_name));
            } catch (e) {
              throw B.createIdTokenParsingError(e);
            }
          },
          Oe = function(e, t) {
            (this.key = e), (this.value = t);
          },
          Pe = (function() {
            function e(e) {
              if (!window)
                throw _.createNoWindowObjectError(
                  "Browser storage class could not find window object"
                );
              if (!(void 0 !== window[e] && null !== window[e]))
                throw fe.createStorageNotSupportedError(e);
              this.cacheLocation = e;
            }
            return (
              (e.prototype.setItem = function(e, t, o) {
                window[this.cacheLocation].setItem(e, t),
                  o && this.setItemCookie(e, t);
              }),
              (e.prototype.getItem = function(e, t) {
                return t && this.getItemCookie(e)
                  ? this.getItemCookie(e)
                  : window[this.cacheLocation].getItem(e);
              }),
              (e.prototype.removeItem = function(e) {
                return window[this.cacheLocation].removeItem(e);
              }),
              (e.prototype.clear = function() {
                return window[this.cacheLocation].clear();
              }),
              (e.prototype.setItemCookie = function(e, t, o) {
                var n =
                  encodeURIComponent(e) +
                  "=" +
                  encodeURIComponent(t) +
                  ";path=/;";
                o && (n += "expires=" + this.getCookieExpirationTime(o) + ";");
                document.cookie = n;
              }),
              (e.prototype.getItemCookie = function(e) {
                for (
                  var t = encodeURIComponent(e) + "=",
                    o = document.cookie.split(";"),
                    n = 0;
                  n < o.length;
                  n++
                ) {
                  for (var r = o[n]; " " === r.charAt(0); ) r = r.substring(1);
                  if (0 === r.indexOf(t))
                    return decodeURIComponent(r.substring(t.length, r.length));
                }
                return "";
              }),
              (e.prototype.clearItemCookie = function(e) {
                this.setItemCookie(e, "", -1);
              }),
              (e.prototype.getCookieExpirationTime = function(e) {
                var t = new Date();
                return new Date(
                  t.getTime() + 24 * e * 60 * 60 * 1e3
                ).toUTCString();
              }),
              e
            );
          })(),
          Ne = (function() {
            function e() {}
            return (
              (e.validateRequest = function(e, t, o, n) {
                if (!t && !e) throw fe.createEmptyRequestError();
                var r, a;
                e &&
                  ((r = t
                    ? me.appendScopes(e.scopes, e.extraScopesToConsent)
                    : e.scopes),
                  me.validateInputScope(r, !t),
                  (r = me.translateClientIdIfSingleScope(r, o)),
                  this.validatePromptParameter(e.prompt),
                  (a = this.validateEQParameters(
                    e.extraQueryParameters,
                    e.claimsRequest
                  )),
                  this.validateClaimsRequest(e.claimsRequest));
                var s = this.validateAndGenerateState(e && e.state, n),
                  c = this.validateAndGenerateCorrelationId(
                    e && e.correlationId
                  );
                return i({}, e, {
                  extraQueryParameters: a,
                  scopes: r,
                  state: s,
                  correlationId: c
                });
              }),
              (e.validatePromptParameter = function(e) {
                if (
                  e &&
                  [C.LOGIN, C.SELECT_ACCOUNT, C.CONSENT, C.NONE].indexOf(e) < 0
                )
                  throw fe.createInvalidPromptError(e);
              }),
              (e.validateEQParameters = function(e, t) {
                var o = i({}, e);
                return o
                  ? (t && delete o[u.claims],
                    w.forEach(function(e) {
                      o[e] && delete o[e];
                    }),
                    o)
                  : null;
              }),
              (e.validateClaimsRequest = function(e) {
                if (e)
                  try {
                    JSON.parse(e);
                  } catch (e) {
                    throw fe.createClaimsRequestParsingError(e);
                  }
              }),
              (e.validateAndGenerateState = function(t, o) {
                return k.isEmpty(t)
                  ? e.generateLibraryState(o)
                  : "" + e.generateLibraryState(o) + u.resourceDelimiter + t;
              }),
              (e.generateLibraryState = function(e) {
                var t = { id: l.createNewGuid(), ts: _e.now(), method: e },
                  o = JSON.stringify(t);
                return l.base64Encode(o);
              }),
              (e.parseLibraryState = function(e) {
                var t = decodeURIComponent(e).split(u.resourceDelimiter)[0];
                if (l.isGuid(t))
                  return {
                    id: t,
                    ts: _e.now(),
                    method: u.interactionTypeRedirect
                  };
                try {
                  var o = l.base64Decode(t);
                  return JSON.parse(o);
                } catch (t) {
                  throw B.createInvalidStateError(e, null);
                }
              }),
              (e.validateAndGenerateCorrelationId = function(e) {
                if (e && !l.isGuid(e))
                  throw fe.createInvalidCorrelationIdError();
                return l.isGuid(e) ? e : l.createNewGuid();
              }),
              (e.createRequestSignature = function(e) {
                return (
                  "" +
                  e.scopes.join(" ").toLowerCase() +
                  u.resourceDelimiter +
                  e.authority
                );
              }),
              e
            );
          })(),
          xe = (function(e) {
            function t(t, o, n) {
              var r = e.call(this, o) || this;
              return (
                (r.temporaryCache = new Pe("sessionStorage")),
                (r.clientId = t),
                (r.rollbackEnabled = !0),
                r.migrateCacheEntries(n),
                r
              );
            }
            return (
              r(t, e),
              (t.prototype.migrateCacheEntries = function(t) {
                var o,
                  n = this,
                  r = u.cachePrefix + "." + d.IDTOKEN,
                  i = u.cachePrefix + "." + d.CLIENT_INFO,
                  a = u.cachePrefix + "." + p.ERROR,
                  s = u.cachePrefix + "." + p.ERROR_DESC,
                  c = e.prototype.getItem.call(this, r);
                if (c)
                  try {
                    o = new Re(c);
                  } catch (e) {
                    return;
                  }
                if (o && o.claims && o.claims.aud === this.clientId) {
                  var l = [
                    c,
                    e.prototype.getItem.call(this, i),
                    e.prototype.getItem.call(this, a),
                    e.prototype.getItem.call(this, s)
                  ];
                  [d.IDTOKEN, d.CLIENT_INFO, p.ERROR, p.ERROR_DESC].forEach(
                    function(e, o) {
                      return n.duplicateCacheEntry(e, l[o], t);
                    }
                  );
                }
              }),
              (t.prototype.duplicateCacheEntry = function(e, t, o) {
                t && this.setItem(e, t, o);
              }),
              (t.prototype.generateCacheKey = function(e, t) {
                try {
                  return JSON.parse(e), e;
                } catch (o) {
                  return 0 === e.indexOf("" + u.cachePrefix) ||
                    0 === e.indexOf(u.adalIdToken)
                    ? e
                    : t
                      ? u.cachePrefix + "." + this.clientId + "." + e
                      : u.cachePrefix + "." + e;
                }
              }),
              (t.prototype.matchKeyForType = function(e, t, o, n) {
                var r = k.validateAndParseJsonCacheKey(e);
                if (!r) return null;
                var i = e.match(t) && e.match(o),
                  a = !1;
                switch (n) {
                  case c.ACCESS_TOKEN:
                    a = !!e.match(u.scopes);
                    break;
                  case c.ID_TOKEN:
                    a = !e.match(u.scopes);
                }
                return i && a ? r : null;
              }),
              (t.prototype.setItem = function(t, o, n) {
                e.prototype.setItem.call(
                  this,
                  this.generateCacheKey(t, !0),
                  o,
                  n
                ),
                  this.rollbackEnabled &&
                    !n &&
                    e.prototype.setItem.call(
                      this,
                      this.generateCacheKey(t, !1),
                      o,
                      n
                    );
              }),
              (t.prototype.getItem = function(t, o) {
                return e.prototype.getItem.call(
                  this,
                  this.generateCacheKey(t, !0),
                  o
                );
              }),
              (t.prototype.removeItem = function(t) {
                this.temporaryCache.removeItem(this.generateCacheKey(t, !0)),
                  e.prototype.removeItem.call(
                    this,
                    this.generateCacheKey(t, !0)
                  ),
                  this.rollbackEnabled &&
                    e.prototype.removeItem.call(
                      this,
                      this.generateCacheKey(t, !1)
                    );
              }),
              (t.prototype.setTemporaryItem = function(e, t, o) {
                this.temporaryCache.setItem(this.generateCacheKey(e, !0), t, o);
              }),
              (t.prototype.getTemporaryItem = function(e, t) {
                return this.temporaryCache.getItem(
                  this.generateCacheKey(e, !0),
                  t
                );
              }),
              (t.prototype.resetCacheItems = function() {
                var t,
                  o = window[this.cacheLocation];
                for (t in o)
                  o.hasOwnProperty(t) &&
                    -1 !== t.indexOf(u.cachePrefix) &&
                    e.prototype.removeItem.call(this, t);
              }),
              (t.prototype.resetTempCacheItems = function(t) {
                var o = this,
                  n = t && Ne.parseLibraryState(t).id,
                  r = this.tokenRenewalInProgress(t),
                  i = window[this.cacheLocation];
                n &&
                  !r &&
                  Object.keys(i).forEach(function(t) {
                    -1 !== t.indexOf(n) &&
                      (o.removeItem(t), e.prototype.clearItemCookie.call(o, t));
                  }),
                  this.setInteractionInProgress(!1),
                  this.removeItem(h.REDIRECT_REQUEST);
              }),
              (t.prototype.setItemCookie = function(t, o, n) {
                e.prototype.setItemCookie.call(
                  this,
                  this.generateCacheKey(t, !0),
                  o,
                  n
                ),
                  this.rollbackEnabled &&
                    e.prototype.setItemCookie.call(
                      this,
                      this.generateCacheKey(t, !1),
                      o,
                      n
                    );
              }),
              (t.prototype.clearItemCookie = function(t) {
                e.prototype.clearItemCookie.call(
                  this,
                  this.generateCacheKey(t, !0)
                ),
                  this.rollbackEnabled &&
                    e.prototype.clearItemCookie.call(
                      this,
                      this.generateCacheKey(t, !1)
                    );
              }),
              (t.prototype.getItemCookie = function(t) {
                return e.prototype.getItemCookie.call(
                  this,
                  this.generateCacheKey(t, !0)
                );
              }),
              (t.prototype.getAllTokensByType = function(e, t, o) {
                var n = this;
                return Object.keys(window[this.cacheLocation]).reduce(function(
                  r,
                  i
                ) {
                  var a = n.matchKeyForType(i, e, t, o);
                  if (a) {
                    var s = n.getItem(i);
                    if (s)
                      try {
                        var c = new Oe(a, JSON.parse(s));
                        return r.concat([c]);
                      } catch (e) {
                        return r;
                      }
                  }
                  return r;
                },
                []);
              }),
              (t.prototype.getAllAccessTokens = function(e, t) {
                return this.getAllTokensByType(e, t, c.ACCESS_TOKEN);
              }),
              (t.prototype.getAllIdTokens = function(e, t) {
                return this.getAllTokensByType(e, t, c.ID_TOKEN);
              }),
              (t.prototype.getAllTokens = function(e, t) {
                var o = this.getAllAccessTokens(e, t),
                  n = this.getAllIdTokens(e, t);
                return o.concat(n);
              }),
              (t.prototype.isInteractionInProgress = function(e) {
                var t = this.getInteractionInProgress();
                return e ? t === this.clientId : !!t;
              }),
              (t.prototype.getInteractionInProgress = function() {
                return this.getTemporaryItem(
                  this.generateCacheKey(h.INTERACTION_STATUS, !1)
                );
              }),
              (t.prototype.setInteractionInProgress = function(e) {
                e && !this.isInteractionInProgress(!1)
                  ? this.setTemporaryItem(
                      this.generateCacheKey(h.INTERACTION_STATUS, !1),
                      this.clientId
                    )
                  : !e &&
                    this.isInteractionInProgress(!0) &&
                    this.removeItem(
                      this.generateCacheKey(h.INTERACTION_STATUS, !1)
                    );
              }),
              (t.prototype.tokenRenewalInProgress = function(e) {
                var o = this.getItem(
                  t.generateTemporaryCacheKey(h.RENEW_STATUS, e)
                );
                return !(!o || o !== u.inProgress);
              }),
              (t.prototype.clearMsalCookie = function(o) {
                var n = this;
                o
                  ? (this.clearItemCookie(
                      t.generateTemporaryCacheKey(h.NONCE_IDTOKEN, o)
                    ),
                    this.clearItemCookie(
                      t.generateTemporaryCacheKey(h.STATE_LOGIN, o)
                    ),
                    this.clearItemCookie(
                      t.generateTemporaryCacheKey(h.LOGIN_REQUEST, o)
                    ),
                    this.clearItemCookie(
                      t.generateTemporaryCacheKey(h.STATE_ACQ_TOKEN, o)
                    ))
                  : document.cookie.split(";").forEach(function(t) {
                      var o = t.trim().split("=")[0];
                      o.indexOf(u.cachePrefix) > -1 &&
                        e.prototype.clearItemCookie.call(n, o);
                    });
              }),
              (t.generateAcquireTokenAccountKey = function(e, t) {
                var o = Ne.parseLibraryState(t).id;
                return (
                  "" +
                  h.ACQUIRE_TOKEN_ACCOUNT +
                  u.resourceDelimiter +
                  e +
                  u.resourceDelimiter +
                  o
                );
              }),
              (t.generateAuthorityKey = function(e) {
                return t.generateTemporaryCacheKey(h.AUTHORITY, e);
              }),
              (t.generateTemporaryCacheKey = function(e, t) {
                var o = Ne.parseLibraryState(t).id;
                return "" + e + u.resourceDelimiter + o;
              }),
              t
            );
          })(Pe),
          Le = (function() {
            function e(e, t, o, n, r, i, a) {
              (this.accountIdentifier = e),
                (this.homeAccountIdentifier = t),
                (this.userName = o),
                (this.name = n),
                (this.idToken = r),
                (this.idTokenClaims = r),
                (this.sid = i),
                (this.environment = a);
            }
            return (
              (e.createAccount = function(t, o) {
                var n,
                  r = t.objectId || t.subject,
                  i = o ? o.uid : "",
                  a = o ? o.utid : "";
                return (
                  k.isEmpty(i) ||
                    (n = k.isEmpty(a)
                      ? l.base64Encode(i)
                      : l.base64Encode(i) + "." + l.base64Encode(a)),
                  new e(
                    r,
                    n,
                    t.preferredName,
                    t.name,
                    t.claims,
                    t.sid,
                    t.issuer
                  )
                );
              }),
              (e.compareAccounts = function(e, t) {
                return (
                  !(!e || !t) &&
                  !(
                    !e.homeAccountIdentifier ||
                    !t.homeAccountIdentifier ||
                    e.homeAccountIdentifier !== t.homeAccountIdentifier
                  )
                );
              }),
              e
            );
          })(),
          De = (function() {
            function e() {}
            return (
              (e.isInIframe = function() {
                return window.parent !== window;
              }),
              (e.isInPopup = function() {
                return !(!window.opener || window.opener === window);
              }),
              (e.generateFrameName = function(e, t) {
                return "" + e + u.resourceDelimiter + t;
              }),
              (e.monitorIframeForHash = function(t, o, n, r) {
                return new Promise(function(i, a) {
                  var s = _e.relativeNowMs() + o;
                  r.verbose("monitorWindowForIframe polling started");
                  var c = setInterval(function() {
                    if (_e.relativeNowMs() > s)
                      return (
                        r.error(
                          "monitorIframeForHash unable to find hash in url, timing out"
                        ),
                        r.errorPii(
                          "monitorIframeForHash polling timed out for url: " + n
                        ),
                        clearInterval(c),
                        void a(B.createTokenRenewalTimeoutError())
                      );
                    var e;
                    try {
                      e = t.location.href;
                    } catch (e) {}
                    e &&
                      ve.urlContainsHash(e) &&
                      (r.verbose("monitorIframeForHash found url in hash"),
                      clearInterval(c),
                      i(t.location.hash));
                  }, e.POLLING_INTERVAL_MS);
                });
              }),
              (e.monitorPopupForHash = function(t, o, n, r) {
                return new Promise(function(i, a) {
                  var s = o / e.POLLING_INTERVAL_MS,
                    c = 0;
                  r.verbose("monitorWindowForHash polling started");
                  var l = setInterval(function() {
                    if (t.closed)
                      return (
                        r.error("monitorWindowForHash window closed"),
                        clearInterval(l),
                        void a(B.createUserCancelledError())
                      );
                    var o;
                    try {
                      o = t.location.href;
                    } catch (e) {}
                    if (o && "about:blank" !== o)
                      if ((c++, o && ve.urlContainsHash(o))) {
                        r.verbose("monitorPopupForHash found url in hash"),
                          clearInterval(l);
                        var u = t.location.hash;
                        e.clearUrlFragment(t), i(u);
                      } else
                        c > s &&
                          (r.error(
                            "monitorPopupForHash unable to find hash in url, timing out"
                          ),
                          r.errorPii(
                            "monitorPopupForHash polling timed out for url: " +
                              n
                          ),
                          clearInterval(l),
                          a(B.createTokenRenewalTimeoutError()));
                  }, e.POLLING_INTERVAL_MS);
                });
              }),
              (e.loadFrame = function(e, t, o, n) {
                var r = this;
                return (
                  n.infoPii("LoadFrame: " + t),
                  new Promise(function(i, a) {
                    setTimeout(function() {
                      var o = r.loadFrameSync(e, t, n);
                      o ? i(o) : a("Unable to load iframe with name: " + t);
                    }, o);
                  })
                );
              }),
              (e.loadFrameSync = function(t, o, n) {
                var r = e.addHiddenIFrame(o, n);
                return r
                  ? (("" !== r.src && "about:blank" !== r.src) ||
                      ((r.src = t),
                      n.infoPii("Frame Name : " + o + " Navigated to: " + t)),
                    r)
                  : null;
              }),
              (e.addHiddenIFrame = function(e, t) {
                if (void 0 === e) return null;
                t.infoPii("Add msal frame to document:" + e);
                var o = document.getElementById(e);
                if (!o) {
                  if (
                    document.createElement &&
                    document.documentElement &&
                    -1 === window.navigator.userAgent.indexOf("MSIE 5.0")
                  ) {
                    var n = document.createElement("iframe");
                    n.setAttribute("id", e),
                      n.setAttribute("aria-hidden", "true"),
                      (n.style.visibility = "hidden"),
                      (n.style.position = "absolute"),
                      (n.style.width = n.style.height = "0"),
                      (n.style.border = "0"),
                      n.setAttribute(
                        "sandbox",
                        "allow-scripts allow-same-origin allow-forms"
                      ),
                      (o = document
                        .getElementsByTagName("body")[0]
                        .appendChild(n));
                  } else
                    document.body &&
                      document.body.insertAdjacentHTML &&
                      document.body.insertAdjacentHTML(
                        "beforeend",
                        "<iframe name='" +
                          e +
                          "' id='" +
                          e +
                          "' style='display:none'></iframe>"
                      );
                  window.frames && window.frames[e] && (o = window.frames[e]);
                }
                return o;
              }),
              (e.removeHiddenIframe = function(e) {
                document.body === e.parentNode && document.body.removeChild(e);
              }),
              (e.getIframeWithHash = function(e) {
                var t = document.getElementsByTagName("iframe");
                return Array.apply(null, Array(t.length))
                  .map(function(e, o) {
                    return t.item(o);
                  })
                  .filter(function(t) {
                    try {
                      return t.contentWindow.location.hash === e;
                    } catch (e) {
                      return !1;
                    }
                  })[0];
              }),
              (e.getPopups = function() {
                return (
                  window.openedWindows || (window.openedWindows = []),
                  window.openedWindows
                );
              }),
              (e.getPopUpWithHash = function(t) {
                return e.getPopups().filter(function(e) {
                  try {
                    return e.location.hash === t;
                  } catch (e) {
                    return !1;
                  }
                })[0];
              }),
              (e.trackPopup = function(t) {
                e.getPopups().push(t);
              }),
              (e.closePopups = function() {
                e.getPopups().forEach(function(e) {
                  return e.close();
                });
              }),
              (e.blockReloadInHiddenIframes = function() {
                if (ve.urlContainsHash(window.location.hash) && e.isInIframe())
                  throw B.createBlockTokenRequestsInHiddenIframeError();
              }),
              (e.checkIfBackButtonIsPressed = function(e) {
                var t = e.getItem(h.REDIRECT_REQUEST);
                if (t && !ve.urlContainsHash(window.location.hash)) {
                  var o = t.split(u.resourceDelimiter);
                  o.shift();
                  var n = o.length > 0 ? o.join(u.resourceDelimiter) : null;
                  e.resetTempCacheItems(n);
                }
              }),
              (e.clearUrlFragment = function(e) {
                (e.location.hash = ""),
                  "function" == typeof e.history.replaceState &&
                    e.history.replaceState(
                      null,
                      null,
                      "" + e.location.pathname + e.location.search
                    );
              }),
              (e.POLLING_INTERVAL_MS = 50),
              e
            );
          })(),
          Ue = (function() {
            function e() {}
            return (
              (e.setResponseIdToken = function(e, t) {
                if (!e) return null;
                if (!t) return e;
                var o = Number(t.expiration);
                return (
                  o && !e.expiresOn && (e.expiresOn = new Date(1e3 * o)),
                  i({}, e, {
                    idToken: t,
                    idTokenClaims: t.claims,
                    uniqueId: t.objectId || t.subject,
                    tenantId: t.tenantId
                  })
                );
              }),
              (e.buildAuthResponse = function(t, o, n, r, a, s) {
                switch (n.responseType) {
                  case g:
                    var l = i({}, o, {
                      tokenType: c.ID_TOKEN,
                      account: r,
                      scopes: a,
                      accountState: s
                    });
                    return (l = e.setResponseIdToken(l, t)).idToken ? l : null;
                  case m:
                    var u = e.setResponseIdToken(o, t);
                    return u && u.accessToken && u.idToken ? u : null;
                  case f:
                    return e.setResponseIdToken(o, t);
                  default:
                    return null;
                }
              }),
              e
            );
          })(),
          qe = (function() {
            function e() {}
            return (
              (e.saveMetadataFromNetwork = function(e, t, o) {
                return a(this, void 0, void 0, function() {
                  var n;
                  return s(this, function(r) {
                    switch (r.label) {
                      case 0:
                        return [4, e.resolveEndpointsAsync(t, o)];
                      case 1:
                        return (
                          (n = r.sent()),
                          this.metadataMap.set(e.CanonicalAuthority, n),
                          [2, n]
                        );
                    }
                  });
                });
              }),
              (e.getMetadata = function(e) {
                return this.metadataMap.get(e);
              }),
              (e.saveMetadataFromConfig = function(e, t) {
                try {
                  if (t) {
                    var o = JSON.parse(t);
                    if (
                      !o.authorization_endpoint ||
                      !o.end_session_endpoint ||
                      !o.issuer
                    )
                      throw fe.createInvalidAuthorityMetadataError();
                    this.metadataMap.set(e, {
                      AuthorizationEndpoint: o.authorization_endpoint,
                      EndSessionEndpoint: o.end_session_endpoint,
                      Issuer: o.issuer
                    });
                  }
                } catch (e) {
                  throw fe.createInvalidAuthorityMetadataError();
                }
              }),
              (e.CreateInstance = function(e, t, o) {
                return k.isEmpty(e)
                  ? null
                  : (o && this.saveMetadataFromConfig(e, o),
                    new Ae(e, t, this.metadataMap.get(e)));
              }),
              (e.metadataMap = new Map()),
              e
            );
          })();
        !(function(e) {
          (e[(e.Error = 0)] = "Error"),
            (e[(e.Warning = 1)] = "Warning"),
            (e[(e.Info = 2)] = "Info"),
            (e[(e.Verbose = 3)] = "Verbose");
        })(Se || (Se = {}));
        var je = (function() {
            function e(e, t) {
              void 0 === t && (t = {}), (this.level = Se.Info);
              var o = t.correlationId,
                n = void 0 === o ? "" : o,
                r = t.level,
                i = void 0 === r ? Se.Info : r,
                a = t.piiLoggingEnabled,
                s = void 0 !== a && a;
              (this.localCallback = e),
                (this.correlationId = n),
                (this.level = i),
                (this.piiLoggingEnabled = s);
            }
            return (
              (e.prototype.logMessage = function(e, t, o) {
                if (!(e > this.level || (!this.piiLoggingEnabled && o))) {
                  var n,
                    r = new Date().toUTCString();
                  (n = k.isEmpty(this.correlationId)
                    ? r + ":" + we + "-" + Se[e] + (o ? "-pii" : "") + " " + t
                    : r +
                      ":" +
                      this.correlationId +
                      "-" +
                      we +
                      "-" +
                      Se[e] +
                      (o ? "-pii" : "") +
                      " " +
                      t),
                    this.executeCallback(e, n, o);
                }
              }),
              (e.prototype.executeCallback = function(e, t, o) {
                this.localCallback && this.localCallback(e, t, o);
              }),
              (e.prototype.error = function(e) {
                this.logMessage(Se.Error, e, !1);
              }),
              (e.prototype.errorPii = function(e) {
                this.logMessage(Se.Error, e, !0);
              }),
              (e.prototype.warning = function(e) {
                this.logMessage(Se.Warning, e, !1);
              }),
              (e.prototype.warningPii = function(e) {
                this.logMessage(Se.Warning, e, !0);
              }),
              (e.prototype.info = function(e) {
                this.logMessage(Se.Info, e, !1);
              }),
              (e.prototype.infoPii = function(e) {
                this.logMessage(Se.Info, e, !0);
              }),
              (e.prototype.verbose = function(e) {
                this.logMessage(Se.Verbose, e, !1);
              }),
              (e.prototype.verbosePii = function(e) {
                this.logMessage(Se.Verbose, e, !0);
              }),
              (e.prototype.isPiiLoggingEnabled = function() {
                return this.piiLoggingEnabled;
              }),
              e
            );
          })(),
          Fe = {
            clientId: "",
            authority: null,
            validateAuthority: !0,
            authorityMetadata: "",
            knownAuthorities: [],
            redirectUri: function() {
              return ve.getCurrentUrl();
            },
            postLogoutRedirectUri: function() {
              return ve.getCurrentUrl();
            },
            navigateToLoginRequestUrl: !0
          },
          Me = { cacheLocation: "sessionStorage", storeAuthStateInCookie: !1 },
          He = {
            logger: new je(null),
            loadFrameTimeout: 6e3,
            tokenRenewalOffsetSeconds: 300,
            navigateFrameWait: 500
          },
          Ve = {
            isAngular: !1,
            unprotectedResources: new Array(),
            protectedResourceMap: new Map()
          };
        var Ke = {
            code: "server_unavailable",
            desc: "Server is temporarily unavailable."
          },
          Ge = { code: "unknown_server_error" },
          $e = (function(e) {
            function t(o, n) {
              var r = e.call(this, o, n) || this;
              return (
                (r.name = "ServerError"),
                Object.setPrototypeOf(r, t.prototype),
                r
              );
            }
            return (
              r(t, e),
              (t.createServerUnavailableError = function() {
                return new t(Ke.code, Ke.desc);
              }),
              (t.createUnknownServerError = function(e) {
                return new t(Ge.code, e);
              }),
              t
            );
          })(_),
          We = { code: "interaction_required" },
          Je = { code: "consent_required" },
          ze = { code: "login_required" },
          Be = (function(e) {
            function t(o, n) {
              var r = e.call(this, o, n) || this;
              return (
                (r.name = "InteractionRequiredAuthError"),
                Object.setPrototypeOf(r, t.prototype),
                r
              );
            }
            return (
              r(t, e),
              (t.isInteractionRequiredError = function(e) {
                var t = [We.code, Je.code, ze.code];
                return e && t.indexOf(e) > -1;
              }),
              (t.createLoginRequiredAuthError = function(e) {
                return new t(ze.code, e);
              }),
              (t.createInteractionRequiredAuthError = function(e) {
                return new t(We.code, e);
              }),
              (t.createConsentRequiredAuthError = function(e) {
                return new t(Je.code, e);
              }),
              t
            );
          })($e);
        function Qe(e) {
          return {
            uniqueId: "",
            tenantId: "",
            tokenType: "",
            idToken: null,
            idTokenClaims: null,
            accessToken: "",
            scopes: null,
            expiresOn: null,
            account: null,
            accountState: e,
            fromCache: !1
          };
        }
        var Xe = "event_name",
          Ye = "elapsed_time",
          Ze = "Microsoft.MSAL.correlation_id",
          et = "msal.api_telem_id",
          tt = "msal.api_id",
          ot = "Microsoft_MSAL_cache_event_count",
          nt = "Microsoft_MSAL_http_event_count",
          rt = "Microsoft_MSAL_ui_event_count",
          it = function(e) {
            var t = ve.GetUrlComponents(e);
            if (Ae.isAdfs(e)) return e;
            var o = t.PathSegments;
            if (o && o.length >= 2) {
              var n = "tfp" === o[1] ? 2 : 1;
              n < o.length && (o[n] = "<tenant>");
            }
            return t.Protocol + "//" + t.HostNameAndPort + "/" + o.join("/");
          },
          at = function(e) {
            return l.base64Encode(e);
          },
          st = function(e) {
            return "msal." + (e || "");
          },
          ct = function() {
            return !!(
              "undefined" != typeof window &&
              "performance" in window &&
              window.performance.mark &&
              window.performance.measure
            );
          },
          lt = (function() {
            function e(e, t, o) {
              var n;
              (this.eventId = l.createNewGuid()),
                (this.label = o),
                (this.event = (((n = {})[st(Xe)] = e),
                (n[st(Ye)] = -1),
                (n["" + Ze] = t),
                n));
            }
            return (
              (e.prototype.setElapsedTime = function(e) {
                this.event[st(Ye)] = e;
              }),
              (e.prototype.stop = function() {
                var e, t, o;
                this.setElapsedTime(+Date.now() - +this.startTimestamp),
                  (e = this.displayName),
                  (t = this.perfStartMark),
                  (o = this.perfEndMark),
                  ct() &&
                    (window.performance.mark(o),
                    window.performance.measure(e, t, o),
                    window.performance.clearMeasures(e),
                    window.performance.clearMarks(t),
                    window.performance.clearMarks(o));
              }),
              (e.prototype.start = function() {
                var e;
                (this.startTimestamp = Date.now()),
                  (this.event[st("start_time")] = this.startTimestamp),
                  (e = this.perfStartMark),
                  ct() && window.performance.mark(e);
              }),
              Object.defineProperty(e.prototype, "telemetryCorrelationId", {
                get: function() {
                  return this.event["" + Ze];
                },
                set: function(e) {
                  this.event["" + Ze] = e;
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e.prototype, "eventName", {
                get: function() {
                  return this.event[st(Xe)];
                },
                enumerable: !0,
                configurable: !0
              }),
              (e.prototype.get = function() {
                return i({}, this.event, { eventId: this.eventId });
              }),
              Object.defineProperty(e.prototype, "key", {
                get: function() {
                  return (
                    this.telemetryCorrelationId +
                    "_" +
                    this.eventId +
                    "-" +
                    this.eventName
                  );
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e.prototype, "displayName", {
                get: function() {
                  return (
                    "Msal-" + this.label + "-" + this.telemetryCorrelationId
                  );
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e.prototype, "perfStartMark", {
                get: function() {
                  return "start-" + this.key;
                },
                enumerable: !0,
                configurable: !0
              }),
              Object.defineProperty(e.prototype, "perfEndMark", {
                get: function() {
                  return "end-" + this.key;
                },
                enumerable: !0,
                configurable: !0
              }),
              e
            );
          })();
        const ut = lt;
        const ht = (function(e) {
          function t(t, o, n, r) {
            var i =
              e.call(this, st("default_event"), o, "DefaultEvent") || this;
            return (
              (i.event[st("client_id")] = n),
              (i.event[st("sdk_plaform")] = t.sdk),
              (i.event[st("sdk_version")] = t.sdkVersion),
              (i.event[st("application_name")] = t.applicationName),
              (i.event[st("application_version")] = t.applicationVersion),
              (i.event[st("effective_connection_speed")] =
                t.networkInformation && t.networkInformation.connectionSpeed),
              (i.event["" + rt] = i.getEventCount(st("ui_event"), r)),
              (i.event["" + nt] = i.getEventCount(st("http_event"), r)),
              (i.event["" + ot] = i.getEventCount(st("cache_event"), r)),
              i
            );
          }
          return (
            r(t, e),
            (t.prototype.getEventCount = function(e, t) {
              return t[e] ? t[e] : 0;
            }),
            t
          );
        })(ut);
        var dt,
          pt,
          gt,
          ft = st("authority"),
          mt = st("authority_type"),
          vt = st("ui_behavior"),
          yt = st("tenant_id"),
          bt = st("user_id"),
          wt = st("was_successful"),
          Tt = st("api_error_code"),
          Ct = st("login_hint");
        !(function(e) {
          (e[(e.AcquireTokenRedirect = 2001)] = "AcquireTokenRedirect"),
            (e[(e.AcquireTokenSilent = 2002)] = "AcquireTokenSilent"),
            (e[(e.AcquireTokenPopup = 2003)] = "AcquireTokenPopup"),
            (e[(e.LoginRedirect = 2004)] = "LoginRedirect"),
            (e[(e.LoginPopup = 2005)] = "LoginPopup"),
            (e[(e.Logout = 2006)] = "Logout");
        })(pt || (pt = {})),
          (function(e) {
            (e.AcquireTokenRedirect = "AcquireTokenRedirect"),
              (e.AcquireTokenSilent = "AcquireTokenSilent"),
              (e.AcquireTokenPopup = "AcquireTokenPopup"),
              (e.LoginRedirect = "LoginRedirect"),
              (e.LoginPopup = "LoginPopup"),
              (e.Logout = "Logout");
          })(gt || (gt = {}));
        var It = (((dt = {})[gt.AcquireTokenSilent] = pt.AcquireTokenSilent),
        (dt[gt.AcquireTokenPopup] = pt.AcquireTokenPopup),
        (dt[gt.AcquireTokenRedirect] = pt.AcquireTokenRedirect),
        (dt[gt.LoginPopup] = pt.LoginPopup),
        (dt[gt.LoginRedirect] = pt.LoginRedirect),
        (dt[gt.Logout] = pt.Logout),
        dt);
        const St = (function(e) {
          function t(t, o, n) {
            var r = e.call(this, st("api_event"), t, n) || this;
            return (
              n && ((r.apiCode = It[n]), (r.apiEventIdentifier = n)),
              (r.piiEnabled = o),
              r
            );
          }
          return (
            r(t, e),
            Object.defineProperty(t.prototype, "apiEventIdentifier", {
              set: function(e) {
                this.event[et] = e;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t.prototype, "apiCode", {
              set: function(e) {
                this.event[tt] = e;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t.prototype, "authority", {
              set: function(e) {
                this.event[ft] = it(e).toLowerCase();
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t.prototype, "apiErrorCode", {
              set: function(e) {
                this.event[Tt] = e;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t.prototype, "tenantId", {
              set: function(e) {
                this.event[yt] = this.piiEnabled && e ? at(e) : null;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t.prototype, "accountId", {
              set: function(e) {
                this.event[bt] = this.piiEnabled && e ? at(e) : null;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t.prototype, "wasSuccessful", {
              get: function() {
                return !0 === this.event[wt];
              },
              set: function(e) {
                this.event[wt] = e;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t.prototype, "loginHint", {
              set: function(e) {
                this.event[Ct] = this.piiEnabled && e ? at(e) : null;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t.prototype, "authorityType", {
              set: function(e) {
                this.event[mt] = e.toLowerCase();
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t.prototype, "promptType", {
              set: function(e) {
                this.event[vt] = e.toLowerCase();
              },
              enumerable: !0,
              configurable: !0
            }),
            t
          );
        })(ut);
        var At = st("http_path"),
          Et = st("user_agent"),
          _t = st("query_parameters"),
          kt = st("api_version"),
          Rt = st("response_code"),
          Ot = st("oauth_error_code"),
          Pt = st("http_method"),
          Nt = st("request_id_header"),
          xt = st("spe_info"),
          Lt = st("server_error_code"),
          Dt = st("server_sub_error_code"),
          Ut = st("url");
        const qt = (function(e) {
          function t(t, o) {
            return e.call(this, st("http_event"), t, o) || this;
          }
          return (
            r(t, e),
            Object.defineProperty(t.prototype, "url", {
              set: function(e) {
                var t = it(e);
                this.event[Ut] = t && t.toLowerCase();
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t.prototype, "httpPath", {
              set: function(e) {
                this.event[At] = it(e).toLowerCase();
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t.prototype, "userAgent", {
              set: function(e) {
                this.event[Et] = e;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t.prototype, "queryParams", {
              set: function(e) {
                this.event[_t] = Te.generateQueryParametersString(e);
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t.prototype, "apiVersion", {
              set: function(e) {
                this.event[kt] = e.toLowerCase();
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t.prototype, "httpResponseStatus", {
              set: function(e) {
                this.event[Rt] = e;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t.prototype, "oAuthErrorCode", {
              set: function(e) {
                this.event[Ot] = e;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t.prototype, "httpMethod", {
              set: function(e) {
                this.event[Pt] = e;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t.prototype, "requestIdHeader", {
              set: function(e) {
                this.event[Nt] = e;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t.prototype, "speInfo", {
              set: function(e) {
                this.event[xt] = e;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t.prototype, "serverErrorCode", {
              set: function(e) {
                this.event[Lt] = e;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t.prototype, "serverSubErrorCode", {
              set: function(e) {
                this.event[Dt] = e;
              },
              enumerable: !0,
              configurable: !0
            }),
            t
          );
        })(ut);
        var jt = (function() {
          function e(e, t, o) {
            (this.completedEvents = {}),
              (this.inProgressEvents = {}),
              (this.eventCountByCorrelationId = {}),
              (this.onlySendFailureTelemetry = !1),
              (this.telemetryPlatform = i(
                {
                  sdk: u.libraryName,
                  sdkVersion: we,
                  networkInformation: {
                    connectionSpeed:
                      "undefined" != typeof navigator &&
                      navigator.connection &&
                      navigator.connection.effectiveType
                  }
                },
                e.platform
              )),
              (this.clientId = e.clientId),
              (this.onlySendFailureTelemetry = e.onlySendFailureTelemetry),
              (this.telemetryEmitter = t),
              (this.logger = o);
          }
          return (
            (e.getTelemetrymanagerStub = function(e, t) {
              return new this(
                {
                  platform: {
                    applicationName: "UnSetStub",
                    applicationVersion: "0.0"
                  },
                  clientId: e
                },
                function() {},
                t
              );
            }),
            (e.prototype.startEvent = function(e) {
              this.logger.verbose("Telemetry Event started: " + e.key),
                this.telemetryEmitter &&
                  (e.start(), (this.inProgressEvents[e.key] = e));
            }),
            (e.prototype.stopEvent = function(e) {
              if (
                (this.logger.verbose("Telemetry Event stopped: " + e.key),
                this.telemetryEmitter && this.inProgressEvents[e.key])
              ) {
                e.stop(), this.incrementEventCount(e);
                var t = this.completedEvents[e.telemetryCorrelationId];
                (this.completedEvents[e.telemetryCorrelationId] = (
                  t || []
                ).concat([e])),
                  delete this.inProgressEvents[e.key];
              }
            }),
            (e.prototype.flush = function(e) {
              var t = this;
              if (
                (this.logger.verbose("Flushing telemetry events: " + e),
                this.telemetryEmitter && this.completedEvents[e])
              ) {
                var o = this.getOrphanedEvents(e);
                o.forEach(function(e) {
                  return t.incrementEventCount(e);
                });
                var n = this.completedEvents[e].concat(o);
                delete this.completedEvents[e];
                var r = this.eventCountByCorrelationId[e];
                if ((delete this.eventCountByCorrelationId[e], n && n.length)) {
                  var i = new ht(this.telemetryPlatform, e, this.clientId, r),
                    a = n.concat([i]);
                  this.telemetryEmitter(
                    a.map(function(e) {
                      return e.get();
                    })
                  );
                }
              }
            }),
            (e.prototype.createAndStartApiEvent = function(e, t) {
              var o = new St(e, this.logger.isPiiLoggingEnabled(), t);
              return this.startEvent(o), o;
            }),
            (e.prototype.stopAndFlushApiEvent = function(e, t, o, n) {
              (t.wasSuccessful = o),
                n && (t.apiErrorCode = n),
                this.stopEvent(t),
                this.flush(e);
            }),
            (e.prototype.createAndStartHttpEvent = function(e, t, o, n) {
              var r = new qt(e, n);
              return (r.url = o), (r.httpMethod = t), this.startEvent(r), r;
            }),
            (e.prototype.incrementEventCount = function(e) {
              var t,
                o = e.eventName,
                n = this.eventCountByCorrelationId[e.telemetryCorrelationId];
              n
                ? (n[o] = n[o] ? n[o] + 1 : 1)
                : (this.eventCountByCorrelationId[
                    e.telemetryCorrelationId
                  ] = (((t = {})[o] = 1), t));
            }),
            (e.prototype.getOrphanedEvents = function(e) {
              var t = this;
              return Object.keys(this.inProgressEvents).reduce(function(o, n) {
                if (-1 !== n.indexOf(e)) {
                  var r = t.inProgressEvents[n];
                  return delete t.inProgressEvents[n], o.concat([r]);
                }
                return o;
              }, []);
            }),
            e
          );
        })();
        const Ft = jt;
        var Mt = (function() {
            function e() {}
            return (
              (e.filterTokenCacheItemsByScope = function(e, t) {
                return e.filter(function(e) {
                  var o = e.key.scopes.split(" "),
                    n = me.removeDefaultScopes(t);
                  return 0 === n.length
                    ? me.containsScope(o, t)
                    : me.containsScope(o, n);
                });
              }),
              (e.filterTokenCacheItemsByAuthority = function(e, t) {
                return e.filter(function(e) {
                  return ve.CanonicalizeUri(e.key.authority) === t;
                });
              }),
              (e.filterTokenCacheItemsByDomain = function(e, t) {
                return e.filter(function(e) {
                  return (
                    ve.GetUrlComponents(e.key.authority).HostNameAndPort === t
                  );
                });
              }),
              e
            );
          })(),
          Ht = (function() {
            function e(e) {
              (this.authResponseCallback = null),
                (this.tokenReceivedCallback = null),
                (this.errorReceivedCallback = null),
                (this.config = (function(e) {
                  var t = e.auth,
                    o = e.cache,
                    n = void 0 === o ? {} : o,
                    r = e.system,
                    a = void 0 === r ? {} : r,
                    s = e.framework,
                    c = void 0 === s ? {} : s;
                  return {
                    auth: i({}, Fe, t),
                    cache: i({}, Me, n),
                    system: i({}, He, a),
                    framework: i({}, Ve, c)
                  };
                })(e)),
                (this.logger = this.config.system.logger),
                (this.clientId = this.config.auth.clientId),
                (this.inCookie = this.config.cache.storeAuthStateInCookie),
                (this.telemetryManager = this.getTelemetryManagerFromConfig(
                  this.config.system.telemetry,
                  this.clientId
                )),
                Ie.setTrustedAuthoritiesFromConfig(
                  this.config.auth.validateAuthority,
                  this.config.auth.knownAuthorities
                ),
                qe.saveMetadataFromConfig(
                  this.config.auth.authority,
                  this.config.auth.authorityMetadata
                ),
                (this.authority =
                  this.config.auth.authority ||
                  "https://login.microsoftonline.com/common"),
                (this.cacheStorage = new xe(
                  this.clientId,
                  this.config.cache.cacheLocation,
                  this.inCookie
                )),
                window.activeRenewals || (window.activeRenewals = {}),
                window.renewStates || (window.renewStates = []),
                window.callbackMappedToRenewStates ||
                  (window.callbackMappedToRenewStates = {}),
                window.promiseMappedToRenewStates ||
                  (window.promiseMappedToRenewStates = {}),
                (window.msal = this);
              var t = window.location.hash,
                o = ve.urlContainsHash(t);
              (De.checkIfBackButtonIsPressed(this.cacheStorage),
              o && this.cacheStorage.isInteractionInProgress(!0)) &&
                (this.getResponseState(t).method ===
                  u.interactionTypeRedirect &&
                  this.handleRedirectAuthenticationResponse(t));
            }
            return (
              Object.defineProperty(e.prototype, "authority", {
                get: function() {
                  return this.authorityInstance.CanonicalAuthority;
                },
                set: function(e) {
                  this.authorityInstance = qe.CreateInstance(
                    e,
                    this.config.auth.validateAuthority
                  );
                },
                enumerable: !0,
                configurable: !0
              }),
              (e.prototype.getAuthorityInstance = function() {
                return this.authorityInstance;
              }),
              (e.prototype.handleRedirectCallback = function(e, t) {
                if (!e) throw fe.createInvalidCallbackObjectError(e);
                t
                  ? ((this.tokenReceivedCallback = e),
                    (this.errorReceivedCallback = t),
                    this.logger.warning(
                      "This overload for callback is deprecated - please change the format of the callbacks to a single callback as shown: (err: AuthError, response: AuthResponse)."
                    ))
                  : (this.authResponseCallback = e),
                  this.redirectError
                    ? this.authErrorHandler(
                        u.interactionTypeRedirect,
                        this.redirectError,
                        this.redirectResponse
                      )
                    : this.redirectResponse &&
                      this.authResponseHandler(
                        u.interactionTypeRedirect,
                        this.redirectResponse
                      );
              }),
              (e.prototype.urlContainsHash = function(e) {
                return (
                  this.logger.verbose("UrlContainsHash has been called"),
                  ve.urlContainsHash(e)
                );
              }),
              (e.prototype.authResponseHandler = function(e, t, o) {
                if (
                  (this.logger.verbose("AuthResponseHandler has been called"),
                  e === u.interactionTypeRedirect)
                )
                  this.logger.verbose("Interaction type is redirect"),
                    this.errorReceivedCallback
                      ? (this.logger.verbose(
                          "Two callbacks were provided to handleRedirectCallback, calling success callback with response"
                        ),
                        this.tokenReceivedCallback(t))
                      : this.authResponseCallback &&
                        (this.logger.verbose(
                          "One callback was provided to handleRedirectCallback, calling authResponseCallback with response"
                        ),
                        this.authResponseCallback(null, t));
                else {
                  if (e !== u.interactionTypePopup)
                    throw B.createInvalidInteractionTypeError();
                  this.logger.verbose("Interaction type is popup, resolving"),
                    o(t);
                }
              }),
              (e.prototype.authErrorHandler = function(e, t, o, n) {
                if (
                  (this.logger.verbose("AuthErrorHandler has been called"),
                  this.cacheStorage.setInteractionInProgress(!1),
                  e === u.interactionTypeRedirect)
                )
                  if (
                    (this.logger.verbose("Interaction type is redirect"),
                    this.errorReceivedCallback)
                  )
                    this.logger.verbose(
                      "Two callbacks were provided to handleRedirectCallback, calling error callback"
                    ),
                      this.errorReceivedCallback(t, o.accountState);
                  else {
                    if (!this.authResponseCallback)
                      throw (this.logger.verbose(
                        "handleRedirectCallback has not been called and no callbacks are registered, throwing error"
                      ),
                      t);
                    this.logger.verbose(
                      "One callback was provided to handleRedirectCallback, calling authResponseCallback with error"
                    ),
                      this.authResponseCallback(t, o);
                  }
                else {
                  if (e !== u.interactionTypePopup)
                    throw B.createInvalidInteractionTypeError();
                  this.logger.verbose("Interaction type is popup, rejecting"),
                    n(t);
                }
              }),
              (e.prototype.loginRedirect = function(e) {
                this.logger.verbose("LoginRedirect has been called");
                var t = Ne.validateRequest(
                  e,
                  !0,
                  this.clientId,
                  u.interactionTypeRedirect
                );
                this.acquireTokenInteractive(
                  u.interactionTypeRedirect,
                  !0,
                  t,
                  null,
                  null
                );
              }),
              (e.prototype.acquireTokenRedirect = function(e) {
                this.logger.verbose("AcquireTokenRedirect has been called");
                var t = Ne.validateRequest(
                  e,
                  !1,
                  this.clientId,
                  u.interactionTypeRedirect
                );
                this.acquireTokenInteractive(
                  u.interactionTypeRedirect,
                  !1,
                  t,
                  null,
                  null
                );
              }),
              (e.prototype.loginPopup = function(e) {
                var t = this;
                this.logger.verbose("LoginPopup has been called");
                var o = Ne.validateRequest(
                    e,
                    !0,
                    this.clientId,
                    u.interactionTypePopup
                  ),
                  n = this.telemetryManager.createAndStartApiEvent(
                    o.correlationId,
                    gt.LoginPopup
                  );
                return new Promise(function(e, n) {
                  t.acquireTokenInteractive(
                    u.interactionTypePopup,
                    !0,
                    o,
                    e,
                    n
                  );
                })
                  .then(function(e) {
                    return (
                      t.logger.verbose("Successfully logged in"),
                      t.telemetryManager.stopAndFlushApiEvent(
                        o.correlationId,
                        n,
                        !0
                      ),
                      e
                    );
                  })
                  .catch(function(e) {
                    throw (t.cacheStorage.resetTempCacheItems(o.state),
                    t.telemetryManager.stopAndFlushApiEvent(
                      o.correlationId,
                      n,
                      !1,
                      e.errorCode
                    ),
                    e);
                  });
              }),
              (e.prototype.acquireTokenPopup = function(e) {
                var t = this;
                this.logger.verbose("AcquireTokenPopup has been called");
                var o = Ne.validateRequest(
                    e,
                    !1,
                    this.clientId,
                    u.interactionTypePopup
                  ),
                  n = this.telemetryManager.createAndStartApiEvent(
                    o.correlationId,
                    gt.AcquireTokenPopup
                  );
                return new Promise(function(e, n) {
                  t.acquireTokenInteractive(
                    u.interactionTypePopup,
                    !1,
                    o,
                    e,
                    n
                  );
                })
                  .then(function(e) {
                    return (
                      t.logger.verbose("Successfully acquired token"),
                      t.telemetryManager.stopAndFlushApiEvent(
                        o.correlationId,
                        n,
                        !0
                      ),
                      e
                    );
                  })
                  .catch(function(e) {
                    throw (t.cacheStorage.resetTempCacheItems(o.state),
                    t.telemetryManager.stopAndFlushApiEvent(
                      o.correlationId,
                      n,
                      !1,
                      e.errorCode
                    ),
                    e);
                  });
              }),
              (e.prototype.acquireTokenInteractive = function(e, t, o, n, r) {
                var i = this;
                this.logger.verbose("AcquireTokenInteractive has been called"),
                  De.blockReloadInHiddenIframes();
                var a,
                  s = this.cacheStorage.isInteractionInProgress(!1);
                if (
                  (e === u.interactionTypeRedirect &&
                    this.cacheStorage.setItem(
                      h.REDIRECT_REQUEST,
                      "" + u.inProgress + u.resourceDelimiter + o.state
                    ),
                  s)
                ) {
                  var c = t
                      ? B.createLoginInProgressError()
                      : B.createAcquireTokenInProgressError(),
                    l = Qe(this.getAccountState(o.state));
                  return (
                    this.cacheStorage.resetTempCacheItems(o.state),
                    void this.authErrorHandler(e, c, l, r)
                  );
                }
                if (
                  (o && o.account && !t
                    ? ((a = o.account),
                      this.logger.verbose("Account set from request"))
                    : ((a = this.getAccount()),
                      this.logger.verbose("Account set from MSAL Cache")),
                  a || Te.isSSOParam(o))
                )
                  this.logger.verbose(
                    "User session exists, login not required"
                  ),
                    this.acquireTokenHelper(a, e, t, o, n, r);
                else {
                  if (!t) {
                    this.logger.verbose(
                      "AcquireToken call, no context or account given"
                    ),
                      this.logger.info("User login is required");
                    l = Qe(this.getAccountState(o.state));
                    return (
                      this.cacheStorage.resetTempCacheItems(o.state),
                      void this.authErrorHandler(
                        e,
                        B.createUserLoginRequiredError(),
                        l,
                        r
                      )
                    );
                  }
                  if (this.extractADALIdToken() && !o.scopes) {
                    this.logger.info(
                      "ADAL's idToken exists. Extracting login information from ADAL's idToken"
                    );
                    var d = this.buildIDTokenRequest(o);
                    (this.silentLogin = !0),
                      this.acquireTokenSilent(d).then(
                        function(t) {
                          (i.silentLogin = !1),
                            i.logger.info("Unified cache call is successful"),
                            i.authResponseHandler(e, t, n);
                        },
                        function(a) {
                          (i.silentLogin = !1),
                            i.logger.error(
                              "Error occurred during unified cache ATS: " + a
                            ),
                            i.acquireTokenHelper(null, e, t, o, n, r);
                        }
                      );
                  } else
                    this.logger.verbose(
                      "Login call but no token found, proceed to login"
                    ),
                      this.acquireTokenHelper(null, e, t, o, n, r);
                }
              }),
              (e.prototype.acquireTokenHelper = function(e, t, o, n, r, i) {
                return a(this, void 0, void 0, function() {
                  var a, c, l, d, f, m, v, y, b, w;
                  return s(this, function(s) {
                    switch (s.label) {
                      case 0:
                        this.logger.verbose(
                          "AcquireTokenHelper has been called"
                        ),
                          this.logger.verbose(
                            "Interaction type: " + t + ". isLoginCall: " + o
                          ),
                          this.cacheStorage.setInteractionInProgress(!0),
                          (a = n.scopes
                            ? n.scopes.join(" ").toLowerCase()
                            : u.oidcScopes.join(" ")),
                          this.logger.verbosePii("Request signature: " + a),
                          (l =
                            n && n.authority
                              ? qe.CreateInstance(
                                  n.authority,
                                  this.config.auth.validateAuthority,
                                  n.authorityMetadata
                                )
                              : this.authorityInstance),
                          (s.label = 1);
                      case 1:
                        return (
                          s.trys.push([1, 11, , 12]),
                          l.hasCachedMetadata()
                            ? [3, 3]
                            : (this.logger.verbose(
                                "No cached metadata for authority"
                              ),
                              [
                                4,
                                qe.saveMetadataFromNetwork(
                                  l,
                                  this.telemetryManager,
                                  n.correlationId
                                )
                              ])
                        );
                      case 2:
                        return s.sent(), [3, 4];
                      case 3:
                        this.logger.verbose(
                          "Cached metadata found for authority"
                        ),
                          (s.label = 4);
                      case 4:
                        if (
                          ((f = o ? g : this.getTokenType(e, n.scopes)),
                          (m = n.redirectStartPage || window.location.href),
                          (c = new Te(
                            l,
                            this.clientId,
                            f,
                            this.getRedirectUri(n && n.redirectUri),
                            n.scopes,
                            n.state,
                            n.correlationId
                          )),
                          this.logger.verbose(
                            "Finished building server authentication request"
                          ),
                          this.updateCacheEntries(c, e, o, m),
                          this.logger.verbose("Updating cache entries"),
                          c.populateQueryParams(e, n),
                          this.logger.verbose(
                            "Query parameters populated from account"
                          ),
                          (v =
                            ve.createNavigateUrl(c) + u.response_mode_fragment),
                          t === u.interactionTypeRedirect)
                        )
                          o
                            ? this.logger.verbose(
                                "Interaction type redirect but login call is true. State not cached"
                              )
                            : (this.cacheStorage.setItem(
                                xe.generateTemporaryCacheKey(
                                  h.STATE_ACQ_TOKEN,
                                  n.state
                                ),
                                c.state,
                                this.inCookie
                              ),
                              this.logger.verbose("State cached for redirect"),
                              this.logger.verbosePii(
                                "State cached: " + c.state
                              ));
                        else {
                          if (t !== u.interactionTypePopup)
                            throw (this.logger.verbose(
                              "Invalid interaction error. State not cached"
                            ),
                            B.createInvalidInteractionTypeError());
                          window.renewStates.push(c.state),
                            (window.requestType = o ? u.login : u.renewToken),
                            this.logger.verbose("State saved to window"),
                            this.logger.verbosePii("State saved: " + c.state),
                            this.registerCallback(c.state, a, r, i);
                        }
                        if (t !== u.interactionTypePopup) return [3, 9];
                        this.logger.verbose(
                          "Interaction type is popup. Generating popup window"
                        );
                        try {
                          (d = this.openPopup(
                            v,
                            "msal",
                            u.popUpWidth,
                            u.popUpHeight
                          )),
                            De.trackPopup(d);
                        } catch (e) {
                          if (
                            (this.logger.info(O.code + ":" + O.desc),
                            this.cacheStorage.setItem(p.ERROR, O.code),
                            this.cacheStorage.setItem(p.ERROR_DESC, O.desc),
                            i)
                          )
                            return i(B.createPopupWindowError()), [2];
                        }
                        if (!d) return [3, 8];
                        s.label = 5;
                      case 5:
                        return (
                          s.trys.push([5, 7, , 8]),
                          [
                            4,
                            De.monitorPopupForHash(
                              d,
                              this.config.system.loadFrameTimeout,
                              v,
                              this.logger
                            )
                          ]
                        );
                      case 6:
                        return (
                          (y = s.sent()),
                          this.handleAuthenticationResponse(y),
                          this.cacheStorage.setInteractionInProgress(!1),
                          this.logger.info("Closing popup window"),
                          this.config.framework.isAngular &&
                            this.broadcast("msal:popUpHashChanged", y),
                          De.closePopups(),
                          [3, 8]
                        );
                      case 7:
                        return (
                          (b = s.sent()),
                          i && i(b),
                          this.config.framework.isAngular
                            ? this.broadcast(
                                "msal:popUpClosed",
                                b.errorCode +
                                  u.resourceDelimiter +
                                  b.errorMessage
                              )
                            : (this.cacheStorage.setInteractionInProgress(!1),
                              d.close()),
                          [3, 8]
                        );
                      case 8:
                        return [3, 10];
                      case 9:
                        n.onRedirectNavigate
                          ? (this.logger.verbose(
                              "Invoking onRedirectNavigate callback"
                            ),
                            !1 !== n.onRedirectNavigate(v)
                              ? (this.logger.verbose(
                                  "onRedirectNavigate did not return false, navigating"
                                ),
                                this.navigateWindow(v))
                              : this.logger.verbose(
                                  "onRedirectNavigate returned false, stopping navigation"
                                ))
                          : (this.logger.verbose(
                              "Navigating window to urlNavigate"
                            ),
                            this.navigateWindow(v)),
                          (s.label = 10);
                      case 10:
                        return [3, 12];
                      case 11:
                        return (
                          (w = s.sent()),
                          this.logger.error(w),
                          this.cacheStorage.resetTempCacheItems(n.state),
                          this.authErrorHandler(
                            t,
                            B.createEndpointResolutionError(w.toString),
                            Qe(n.state),
                            i
                          ),
                          d && d.close(),
                          [3, 12]
                        );
                      case 12:
                        return [2];
                    }
                  });
                });
              }),
              (e.prototype.ssoSilent = function(e) {
                if ((this.logger.verbose("ssoSilent has been called"), !e))
                  throw fe.createEmptyRequestError();
                if (!e.sid && !e.loginHint) throw fe.createSsoSilentError();
                return this.acquireTokenSilent(
                  i({}, e, { scopes: u.oidcScopes })
                );
              }),
              (e.prototype.acquireTokenSilent = function(e) {
                var t = this;
                this.logger.verbose("AcquireTokenSilent has been called");
                var o = Ne.validateRequest(
                    e,
                    !1,
                    this.clientId,
                    u.interactionTypeSilent
                  ),
                  n = this.telemetryManager.createAndStartApiEvent(
                    o.correlationId,
                    gt.AcquireTokenSilent
                  ),
                  r = Ne.createRequestSignature(o);
                return new Promise(function(e, n) {
                  return a(t, void 0, void 0, function() {
                    var t, i, a, c, l, h, d, p, g, f, m;
                    return s(this, function(s) {
                      switch (s.label) {
                        case 0:
                          if (
                            (De.blockReloadInHiddenIframes(),
                            (t = o.scopes.join(" ").toLowerCase()),
                            this.logger.verbosePii("Serialized scopes: " + t),
                            o.account
                              ? ((i = o.account),
                                this.logger.verbose("Account set from request"))
                              : ((i = this.getAccount()),
                                this.logger.verbose(
                                  "Account set from MSAL Cache"
                                )),
                            (a = this.cacheStorage.getItem(u.adalIdToken)),
                            !i && !o.sid && !o.loginHint && k.isEmpty(a))
                          )
                            return (
                              this.logger.info("User login is required"),
                              [2, n(B.createUserLoginRequiredError())]
                            );
                          if (
                            ((c = this.getTokenType(i, o.scopes)),
                            this.logger.verbose("Response type: " + c),
                            (l = new Te(
                              qe.CreateInstance(
                                o.authority,
                                this.config.auth.validateAuthority,
                                o.authorityMetadata
                              ),
                              this.clientId,
                              c,
                              this.getRedirectUri(o.redirectUri),
                              o.scopes,
                              o.state,
                              o.correlationId
                            )),
                            this.logger.verbose(
                              "Finished building server authentication request"
                            ),
                            Te.isSSOParam(o) || i
                              ? (l.populateQueryParams(i, o, null, !0),
                                this.logger.verbose(
                                  "Query parameters populated from existing SSO or account"
                                ))
                              : i || k.isEmpty(a)
                                ? this.logger.verbose(
                                    "No additional query parameters added"
                                  )
                                : ((h = ke.extractIdToken(a)),
                                  this.logger.verbose(
                                    "ADAL's idToken exists. Extracting login information from ADAL's idToken to populate query parameters"
                                  ),
                                  l.populateQueryParams(i, null, h, !0)),
                            !(d = o.claimsRequest || l.claimsValue) &&
                              !o.forceRefresh)
                          )
                            try {
                              g = this.getCachedToken(l, i);
                            } catch (e) {
                              p = e;
                            }
                          return g
                            ? (this.logger.verbose(
                                "Token found in cache lookup"
                              ),
                              this.logger.verbosePii(
                                "Scopes found: " + JSON.stringify(g.scopes)
                              ),
                              e(g),
                              [2, null])
                            : [3, 1];
                        case 1:
                          return p
                            ? (this.logger.infoPii(
                                p.errorCode + ":" + p.errorMessage
                              ),
                              n(p),
                              [2, null])
                            : [3, 2];
                        case 2:
                          (f = void 0),
                            (f = d
                              ? "Skipped cache lookup since claims were given"
                              : o.forceRefresh
                                ? "Skipped cache lookup since request.forceRefresh option was set to true"
                                : "No valid token found in cache lookup"),
                            this.logger.verbose(f),
                            l.authorityInstance ||
                              (l.authorityInstance = o.authority
                                ? qe.CreateInstance(
                                    o.authority,
                                    this.config.auth.validateAuthority,
                                    o.authorityMetadata
                                  )
                                : this.authorityInstance),
                            this.logger.verbosePii(
                              "Authority instance: " + l.authority
                            ),
                            (s.label = 3);
                        case 3:
                          return (
                            s.trys.push([3, 7, , 8]),
                            l.authorityInstance.hasCachedMetadata()
                              ? [3, 5]
                              : (this.logger.verbose(
                                  "No cached metadata for authority"
                                ),
                                [
                                  4,
                                  qe.saveMetadataFromNetwork(
                                    l.authorityInstance,
                                    this.telemetryManager,
                                    o.correlationId
                                  )
                                ])
                          );
                        case 4:
                          return (
                            s.sent(),
                            this.logger.verbose(
                              "Authority has been updated with endpoint discovery response"
                            ),
                            [3, 6]
                          );
                        case 5:
                          this.logger.verbose(
                            "Cached metadata found for authority"
                          ),
                            (s.label = 6);
                        case 6:
                          return (
                            window.activeRenewals[r]
                              ? (this.logger.verbose(
                                  "Renewing token in progress. Registering callback"
                                ),
                                this.registerCallback(
                                  window.activeRenewals[r],
                                  r,
                                  e,
                                  n
                                ))
                              : o.scopes && me.onlyContainsOidcScopes(o.scopes)
                                ? (this.logger.verbose(
                                    "OpenID Connect scopes only, renewing idToken"
                                  ),
                                  (this.silentLogin = !0),
                                  this.renewIdToken(r, e, n, i, l))
                                : (this.logger.verbose("Renewing access token"),
                                  this.renewToken(r, e, n, i, l)),
                            [3, 8]
                          );
                        case 7:
                          return (
                            (m = s.sent()),
                            this.logger.error(m),
                            n(B.createEndpointResolutionError(m.toString())),
                            [2, null]
                          );
                        case 8:
                          return [2];
                      }
                    });
                  });
                })
                  .then(function(e) {
                    return (
                      t.logger.verbose("Successfully acquired token"),
                      t.telemetryManager.stopAndFlushApiEvent(
                        o.correlationId,
                        n,
                        !0
                      ),
                      e
                    );
                  })
                  .catch(function(e) {
                    throw (t.cacheStorage.resetTempCacheItems(o.state),
                    t.telemetryManager.stopAndFlushApiEvent(
                      o.correlationId,
                      n,
                      !1,
                      e.errorCode
                    ),
                    e);
                  });
              }),
              (e.prototype.openPopup = function(e, t, o, n) {
                this.logger.verbose("OpenPopup has been called");
                try {
                  var r = window.screenLeft
                      ? window.screenLeft
                      : window.screenX,
                    i = window.screenTop ? window.screenTop : window.screenY,
                    a =
                      window.innerWidth ||
                      document.documentElement.clientWidth ||
                      document.body.clientWidth,
                    s =
                      window.innerHeight ||
                      document.documentElement.clientHeight ||
                      document.body.clientHeight,
                    c = a / 2 - o / 2 + r,
                    l = s / 2 - n / 2 + i,
                    u = window.open(
                      e,
                      t,
                      "width=" +
                        o +
                        ", height=" +
                        n +
                        ", top=" +
                        l +
                        ", left=" +
                        c +
                        ", scrollbars=yes"
                    );
                  if (!u) throw B.createPopupWindowError();
                  return u.focus && u.focus(), u;
                } catch (e) {
                  throw (this.cacheStorage.setInteractionInProgress(!1),
                  B.createPopupWindowError(e.toString()));
                }
              }),
              (e.prototype.loadIframeTimeout = function(e, t, o) {
                return a(this, void 0, void 0, function() {
                  var n, r, i, a, c;
                  return s(this, function(s) {
                    switch (s.label) {
                      case 0:
                        return (
                          (n = window.activeRenewals[o]),
                          this.logger.verbosePii(
                            "Set loading state to pending for: " + o + ":" + n
                          ),
                          this.cacheStorage.setItem(
                            xe.generateTemporaryCacheKey(h.RENEW_STATUS, n),
                            u.inProgress
                          ),
                          this.config.system.navigateFrameWait
                            ? [
                                4,
                                De.loadFrame(
                                  e,
                                  t,
                                  this.config.system.navigateFrameWait,
                                  this.logger
                                )
                              ]
                            : [3, 2]
                        );
                      case 1:
                        return (i = s.sent()), [3, 3];
                      case 2:
                        (i = De.loadFrameSync(e, t, this.logger)),
                          (s.label = 3);
                      case 3:
                        (r = i), (s.label = 4);
                      case 4:
                        return (
                          s.trys.push([4, 6, , 7]),
                          [
                            4,
                            De.monitorIframeForHash(
                              r.contentWindow,
                              this.config.system.loadFrameTimeout,
                              e,
                              this.logger
                            )
                          ]
                        );
                      case 5:
                        return (
                          (a = s.sent()) &&
                            this.handleAuthenticationResponse(a),
                          [3, 7]
                        );
                      case 6:
                        throw ((c = s.sent()),
                        this.cacheStorage.getItem(
                          xe.generateTemporaryCacheKey(h.RENEW_STATUS, n)
                        ) === u.inProgress &&
                          (this.logger.verbose(
                            "Loading frame has timed out after: " +
                              this.config.system.loadFrameTimeout / 1e3 +
                              " seconds for scope/authority " +
                              o +
                              ":" +
                              n
                          ),
                          n &&
                            window.callbackMappedToRenewStates[n] &&
                            window.callbackMappedToRenewStates[n](null, c),
                          this.cacheStorage.removeItem(
                            xe.generateTemporaryCacheKey(h.RENEW_STATUS, n)
                          )),
                        De.removeHiddenIframe(r),
                        c);
                      case 7:
                        return De.removeHiddenIframe(r), [2];
                    }
                  });
                });
              }),
              (e.prototype.navigateWindow = function(e, t) {
                if (!e || k.isEmpty(e))
                  throw (this.logger.info("Navigate url is empty"),
                  _.createUnexpectedError("Navigate url is empty"));
                var o = t || window,
                  n = t ? "Navigated Popup window to:" + e : "Navigate to:" + e;
                this.logger.infoPii(n), o.location.assign(e);
              }),
              (e.prototype.registerCallback = function(e, t, o, n) {
                var r = this;
                (window.activeRenewals[t] = e),
                  window.promiseMappedToRenewStates[e] ||
                    (window.promiseMappedToRenewStates[e] = []),
                  window.promiseMappedToRenewStates[e].push({
                    resolve: o,
                    reject: n
                  }),
                  window.callbackMappedToRenewStates[e] ||
                    (window.callbackMappedToRenewStates[e] = function(o, n) {
                      delete window.activeRenewals[t];
                      for (
                        var i = 0;
                        i < window.promiseMappedToRenewStates[e].length;
                        ++i
                      )
                        try {
                          if (n)
                            window.promiseMappedToRenewStates[e][i].reject(n);
                          else {
                            if (!o)
                              throw (r.cacheStorage.resetTempCacheItems(e),
                              _.createUnexpectedError(
                                "Error and response are both null"
                              ));
                            window.promiseMappedToRenewStates[e][i].resolve(o);
                          }
                        } catch (e) {
                          r.logger.warning(e);
                        }
                      delete window.promiseMappedToRenewStates[e],
                        delete window.callbackMappedToRenewStates[e];
                    });
              }),
              (e.prototype.logout = function(e) {
                this.logger.verbose("Logout has been called"),
                  this.logoutAsync(e);
              }),
              (e.prototype.logoutAsync = function(e) {
                return a(this, void 0, void 0, function() {
                  var t, o, n, r, i, a;
                  return s(this, function(s) {
                    switch (s.label) {
                      case 0:
                        (t = e || l.createNewGuid()),
                          (o = this.telemetryManager.createAndStartApiEvent(
                            t,
                            gt.Logout
                          )),
                          this.clearCache(),
                          (this.account = null),
                          (s.label = 1);
                      case 1:
                        return (
                          s.trys.push([1, 5, , 6]),
                          this.authorityInstance.hasCachedMetadata()
                            ? [3, 3]
                            : (this.logger.verbose(
                                "No cached metadata for authority"
                              ),
                              [
                                4,
                                qe.saveMetadataFromNetwork(
                                  this.authorityInstance,
                                  this.telemetryManager,
                                  e
                                )
                              ])
                        );
                      case 2:
                        return s.sent(), [3, 4];
                      case 3:
                        this.logger.verbose(
                          "Cached metadata found for authority"
                        ),
                          (s.label = 4);
                      case 4:
                        return (
                          (n = "client-request-id=" + t),
                          (r = void 0),
                          this.getPostLogoutRedirectUri()
                            ? ((r =
                                "&post_logout_redirect_uri=" +
                                encodeURIComponent(
                                  this.getPostLogoutRedirectUri()
                                )),
                              this.logger.verbose("redirectUri found and set"))
                            : ((r = ""),
                              this.logger.verbose(
                                "No redirectUri set for app. postLogoutQueryParam is empty"
                              )),
                          (i = void 0),
                          this.authorityInstance.EndSessionEndpoint
                            ? ((i =
                                this.authorityInstance.EndSessionEndpoint +
                                "?" +
                                n +
                                r),
                              this.logger.verbose(
                                "EndSessionEndpoint found and urlNavigate set"
                              ),
                              this.logger.verbosePii(
                                "urlNavigate set to: " +
                                  this.authorityInstance.EndSessionEndpoint
                              ))
                            : ((i =
                                this.authority + "oauth2/v2.0/logout?" + n + r),
                              this.logger.verbose(
                                "No endpoint, urlNavigate set to default"
                              )),
                          this.telemetryManager.stopAndFlushApiEvent(t, o, !0),
                          this.logger.verbose(
                            "Navigating window to urlNavigate"
                          ),
                          this.navigateWindow(i),
                          [3, 6]
                        );
                      case 5:
                        return (
                          (a = s.sent()),
                          this.telemetryManager.stopAndFlushApiEvent(
                            t,
                            o,
                            !1,
                            a.errorCode
                          ),
                          [3, 6]
                        );
                      case 6:
                        return [2];
                    }
                  });
                });
              }),
              (e.prototype.clearCache = function() {
                this.logger.verbose("Clearing cache"),
                  (window.renewStates = []);
                for (
                  var e = this.cacheStorage.getAllTokens(
                      u.clientId,
                      u.homeAccountIdentifier
                    ),
                    t = 0;
                  t < e.length;
                  t++
                )
                  this.cacheStorage.removeItem(JSON.stringify(e[t].key));
                this.cacheStorage.resetCacheItems(),
                  this.cacheStorage.clearMsalCookie(),
                  this.logger.verbose("Cache cleared");
              }),
              (e.prototype.clearCacheForScope = function(e) {
                this.logger.verbose("Clearing access token from cache");
                for (
                  var t = this.cacheStorage.getAllAccessTokens(
                      u.clientId,
                      u.homeAccountIdentifier
                    ),
                    o = 0;
                  o < t.length;
                  o++
                ) {
                  var n = t[o];
                  n.value.accessToken === e &&
                    (this.cacheStorage.removeItem(JSON.stringify(n.key)),
                    this.logger.verbosePii("Access token removed: " + n.key));
                }
              }),
              (e.prototype.isCallback = function(e) {
                return (
                  this.logger.info(
                    "isCallback will be deprecated in favor of urlContainsHash in MSAL.js v2.0."
                  ),
                  this.logger.verbose("isCallback has been called"),
                  ve.urlContainsHash(e)
                );
              }),
              (e.prototype.processCallBack = function(e, t, o) {
                this.logger.info(
                  "ProcessCallBack has been called. Processing callback from redirect response"
                );
                var n,
                  r,
                  i = t;
                i ||
                  (this.logger.verbose(
                    "StateInfo is null, getting stateInfo from hash"
                  ),
                  (i = this.getResponseState(e)));
                try {
                  n = this.saveTokenFromHash(e, i);
                } catch (e) {
                  r = e;
                }
                try {
                  this.cacheStorage.clearMsalCookie(i.state);
                  var a = this.getAccountState(i.state);
                  if (n) {
                    if (
                      (i.requestType === u.renewToken || n.accessToken
                        ? (window.parent !== window
                            ? this.logger.verbose(
                                "Window is in iframe, acquiring token silently"
                              )
                            : this.logger.verbose(
                                "Acquiring token interactive in progress"
                              ),
                          this.logger.verbose(
                            "Response tokenType set to " + c.ACCESS_TOKEN
                          ),
                          (n.tokenType = c.ACCESS_TOKEN))
                        : i.requestType === u.login &&
                          (this.logger.verbose(
                            "Response tokenType set to " + c.ID_TOKEN
                          ),
                          (n.tokenType = c.ID_TOKEN)),
                      !o)
                    )
                      return (
                        this.logger.verbose("Setting redirectResponse"),
                        void (this.redirectResponse = n)
                      );
                  } else if (!o)
                    return (
                      this.logger.verbose(
                        "Response is null, setting redirectResponse with state"
                      ),
                      (this.redirectResponse = Qe(a)),
                      (this.redirectError = r),
                      void this.cacheStorage.resetTempCacheItems(i.state)
                    );
                  this.logger.verbose(
                    "Calling callback provided to processCallback"
                  ),
                    o(n, r);
                } catch (e) {
                  throw (this.logger.error(
                    "Error occurred in token received callback function: " + e
                  ),
                  B.createErrorInCallbackFunction(e.toString()));
                }
              }),
              (e.prototype.handleAuthenticationResponse = function(e) {
                this.logger.verbose(
                  "HandleAuthenticationResponse has been called"
                );
                var t = e || window.location.hash,
                  o = this.getResponseState(t);
                this.logger.verbose("Obtained state from response");
                var n = window.callbackMappedToRenewStates[o.state];
                this.processCallBack(t, o, n);
              }),
              (e.prototype.handleRedirectAuthenticationResponse = function(e) {
                this.logger.info("Returned from redirect url"),
                  this.logger.verbose(
                    "HandleRedirectAuthenticationResponse has been called"
                  ),
                  De.clearUrlFragment(window),
                  this.logger.verbose("Window.location.hash cleared");
                var t = this.getResponseState(e);
                if (
                  this.config.auth.navigateToLoginRequestUrl &&
                  window.parent === window
                ) {
                  this.logger.verbose(
                    "Window.parent is equal to window, not in popup or iframe. Navigation to login request url after login turned on"
                  );
                  var o = this.cacheStorage.getItem(
                    xe.generateTemporaryCacheKey(h.LOGIN_REQUEST, t.state),
                    this.inCookie
                  );
                  if (!o || "null" === o)
                    return (
                      this.logger.error(
                        "Unable to get valid login request url from cache, redirecting to home page"
                      ),
                      void window.location.assign("/")
                    );
                  this.logger.verbose(
                    "Valid login request url obtained from cache"
                  );
                  var n = ve.removeHashFromUrl(window.location.href),
                    r = ve.removeHashFromUrl(o);
                  if (n !== r)
                    return (
                      this.logger.verbose(
                        "Current url is not login request url, navigating"
                      ),
                      this.logger.verbosePii(
                        "CurrentUrl: " + n + ", finalRedirectUrl: " + r
                      ),
                      void window.location.assign("" + r + e)
                    );
                  this.logger.verbose("Current url matches login request url");
                  var i = ve.GetUrlComponents(o);
                  i.Hash &&
                    (this.logger.verbose(
                      "Login request url contains hash, resetting non-msal hash"
                    ),
                    (window.location.hash = i.Hash));
                } else
                  this.config.auth.navigateToLoginRequestUrl ||
                    this.logger.verbose(
                      "Default navigation to start page after login turned off"
                    );
                this.processCallBack(e, t, null);
              }),
              (e.prototype.getResponseState = function(e) {
                this.logger.verbose("GetResponseState has been called");
                var t,
                  o = ve.deserializeHash(e);
                if (!o)
                  throw _.createUnexpectedError(
                    "Hash was not parsed correctly."
                  );
                if (!o.hasOwnProperty(c.STATE))
                  throw _.createUnexpectedError("Hash does not contain state.");
                this.logger.verbose(
                  "Hash contains state. Creating stateInfo object"
                );
                var n = Ne.parseLibraryState(o.state);
                if (
                  (t = {
                    requestType: u.unknown,
                    state: o.state,
                    timestamp: n.ts,
                    method: n.method,
                    stateMatch: !1
                  }).state ===
                    this.cacheStorage.getItem(
                      xe.generateTemporaryCacheKey(h.STATE_LOGIN, t.state),
                      this.inCookie
                    ) ||
                  t.state === this.silentAuthenticationState
                )
                  return (
                    this.logger.verbose(
                      "State matches cached state, setting requestType to login"
                    ),
                    (t.requestType = u.login),
                    (t.stateMatch = !0),
                    t
                  );
                if (
                  t.state ===
                  this.cacheStorage.getItem(
                    xe.generateTemporaryCacheKey(h.STATE_ACQ_TOKEN, t.state),
                    this.inCookie
                  )
                )
                  return (
                    this.logger.verbose(
                      "State matches cached state, setting requestType to renewToken"
                    ),
                    (t.requestType = u.renewToken),
                    (t.stateMatch = !0),
                    t
                  );
                if (!t.stateMatch) {
                  this.logger.verbose(
                    "State does not match cached state, setting requestType to type from window"
                  ),
                    (t.requestType = window.requestType);
                  for (var r = window.renewStates, i = 0; i < r.length; i++)
                    if (r[i] === t.state) {
                      this.logger.verbose("Matching state found for request"),
                        (t.stateMatch = !0);
                      break;
                    }
                  t.stateMatch ||
                    this.logger.verbose("Matching state not found for request");
                }
                return t;
              }),
              (e.prototype.getCachedToken = function(e, t) {
                this.logger.verbose("GetCachedToken has been called");
                var o = e.scopes,
                  n = this.getCachedIdToken(e, t),
                  r = this.getCachedAccessToken(e, t, o),
                  i = this.getAccountState(e.state);
                return Ue.buildAuthResponse(n, r, e, t, o, i);
              }),
              (e.prototype.getTokenCacheItemByAuthority = function(e, t, o, n) {
                var r,
                  i = this;
                return 1 ===
                  (r =
                    ve.isCommonAuthority(e) ||
                    ve.isOrganizationsAuthority(e) ||
                    ve.isConsumersAuthority(e)
                      ? Mt.filterTokenCacheItemsByDomain(
                          t,
                          ve.GetUrlComponents(e).HostNameAndPort
                        )
                      : Mt.filterTokenCacheItemsByAuthority(t, e)).length
                  ? r[0]
                  : r.length > 1
                    ? (this.logger.warning(
                        "Multiple matching tokens found. Cleaning cache and requesting a new token."
                      ),
                      r.forEach(function(e) {
                        i.cacheStorage.removeItem(JSON.stringify(e.key));
                      }),
                      null)
                    : (this.logger.verbose(
                        "No matching tokens of type " + n + " found"
                      ),
                      null);
              }),
              (e.prototype.getCachedIdToken = function(e, t) {
                this.logger.verbose(
                  "Getting all cached tokens of type ID Token"
                );
                var o = this.cacheStorage.getAllIdTokens(
                    this.clientId,
                    t ? t.homeAccountIdentifier : null
                  ),
                  n = e.authority || this.authority,
                  r = this.getTokenCacheItemByAuthority(n, o, null, c.ID_TOKEN);
                if (r) {
                  if (
                    (this.logger.verbose("Evaluating ID token found"),
                    this.evaluateTokenExpiration(r))
                  ) {
                    this.logger.verbose(
                      "ID token expiration is within offset, using ID token found in cache"
                    );
                    var i = r.value;
                    return (
                      i
                        ? this.logger.verbose(
                            "ID Token found in cache is valid and unexpired"
                          )
                        : this.logger.verbose(
                            "ID Token found in cache is invalid"
                          ),
                      i ? new Re(i.idToken) : null
                    );
                  }
                  return (
                    this.logger.verbose(
                      "Cached ID token is expired, removing from cache"
                    ),
                    this.cacheStorage.removeItem(JSON.stringify(r.key)),
                    null
                  );
                }
                return this.logger.verbose("No tokens found"), null;
              }),
              (e.prototype.getCachedAccessToken = function(e, t, o) {
                this.logger.verbose(
                  "Getting all cached tokens of type Access Token"
                );
                var n = this.cacheStorage.getAllAccessTokens(
                    this.clientId,
                    t ? t.homeAccountIdentifier : null
                  ),
                  r = Mt.filterTokenCacheItemsByScope(n, o),
                  i = e.authority || this.authority,
                  a = this.getTokenCacheItemByAuthority(
                    i,
                    r,
                    o,
                    c.ACCESS_TOKEN
                  );
                if (a) {
                  if (
                    ((e.authorityInstance = qe.CreateInstance(
                      a.key.authority,
                      this.config.auth.validateAuthority
                    )),
                    this.logger.verbose("Evaluating access token found"),
                    this.evaluateTokenExpiration(a))
                  ) {
                    this.logger.verbose(
                      "Access token expiration is within offset, using access token found in cache"
                    );
                    var s = t || this.getAccount();
                    if (!s)
                      throw _.createUnexpectedError(
                        "Account should not be null here."
                      );
                    var l = this.getAccountState(e.state);
                    return {
                      uniqueId: "",
                      tenantId: "",
                      tokenType: c.ACCESS_TOKEN,
                      idToken: null,
                      idTokenClaims: null,
                      accessToken: a.value.accessToken,
                      scopes: a.key.scopes.split(" "),
                      expiresOn: new Date(1e3 * Number(a.value.expiresIn)),
                      account: s,
                      accountState: l,
                      fromCache: !0
                    };
                  }
                  return (
                    this.logger.verbose(
                      "Access token expired, removing from cache"
                    ),
                    this.cacheStorage.removeItem(JSON.stringify(a.key)),
                    null
                  );
                }
                return (
                  this.logger.verbose(
                    "No matching token found when filtering by scope and authority"
                  ),
                  null
                );
              }),
              (e.prototype.evaluateTokenExpiration = function(e) {
                var t = Number(e.value.expiresIn);
                return ke.validateExpirationIsWithinOffset(
                  t,
                  this.config.system.tokenRenewalOffsetSeconds
                );
              }),
              (e.prototype.extractADALIdToken = function() {
                this.logger.verbose("ExtractADALIdToken has been called");
                var e = this.cacheStorage.getItem(u.adalIdToken);
                return k.isEmpty(e) ? null : ke.extractIdToken(e);
              }),
              (e.prototype.renewToken = function(e, t, o, n, r) {
                this.logger.verbose("RenewToken has been called"),
                  this.logger.verbosePii(
                    "RenewToken scope and authority: " + e
                  );
                var i = De.generateFrameName(S, e);
                De.addHiddenIFrame(i, this.logger),
                  this.updateCacheEntries(r, n, !1),
                  this.logger.verbosePii(
                    "RenewToken expected state: " + r.state
                  );
                var a =
                  ve.urlRemoveQueryStringParameter(
                    ve.createNavigateUrl(r),
                    u.prompt
                  ) +
                  u.prompt_none +
                  u.response_mode_fragment;
                window.renewStates.push(r.state),
                  (window.requestType = u.renewToken),
                  this.logger.verbose("Set window.renewState and requestType"),
                  this.registerCallback(r.state, e, t, o),
                  this.logger.infoPii("Navigate to: " + a),
                  this.loadIframeTimeout(a, i, e).catch(function(e) {
                    return o(e);
                  });
              }),
              (e.prototype.renewIdToken = function(e, t, o, n, r) {
                this.logger.info("RenewIdToken has been called");
                var i = De.generateFrameName(I, e);
                De.addHiddenIFrame(i, this.logger),
                  this.updateCacheEntries(r, n, !1),
                  this.logger.verbose(
                    "RenewIdToken expected state: " + r.state
                  );
                var a =
                  ve.urlRemoveQueryStringParameter(
                    ve.createNavigateUrl(r),
                    u.prompt
                  ) +
                  u.prompt_none +
                  u.response_mode_fragment;
                this.silentLogin
                  ? (this.logger.verbose(
                      "Silent login is true, set silentAuthenticationState"
                    ),
                    (window.requestType = u.login),
                    (this.silentAuthenticationState = r.state))
                  : (this.logger.verbose(
                      "Not silent login, set window.renewState and requestType"
                    ),
                    (window.requestType = u.renewToken),
                    window.renewStates.push(r.state)),
                  this.registerCallback(r.state, e, t, o),
                  this.logger.infoPii('Navigate to:" ' + a),
                  this.loadIframeTimeout(a, i, e).catch(function(e) {
                    return o(e);
                  });
              }),
              (e.prototype.saveToken = function(e, t, o, n, r) {
                var i = new ye(t, this.clientId, o, n.uid, n.utid),
                  a = new be(
                    e.accessToken,
                    e.idToken.rawIdToken,
                    r.toString(),
                    n.encodeClientInfo()
                  );
                return (
                  this.cacheStorage.setItem(
                    JSON.stringify(i),
                    JSON.stringify(a)
                  ),
                  r
                    ? (this.logger.verbose("New expiration set for token"),
                      (e.expiresOn = new Date(1e3 * r)))
                    : this.logger.error(
                        "Could not parse expiresIn parameter for access token"
                      ),
                  e
                );
              }),
              (e.prototype.saveIdToken = function(e, t, o, n, r) {
                this.logger.verbose("SaveIdToken has been called");
                var a = i({}, e);
                (a.scopes = u.oidcScopes), (a.accessToken = o[c.ID_TOKEN]);
                var s = Number(r.expiration);
                return (
                  this.logger.verbose("Saving ID token to cache"),
                  this.saveToken(a, t, undefined, n, s)
                );
              }),
              (e.prototype.saveAccessToken = function(e, t, o, n) {
                this.logger.verbose("SaveAccessToken has been called");
                var r = i({}, e),
                  a = o[c.SCOPE],
                  s = a.split(" "),
                  l = this.cacheStorage.getAllAccessTokens(this.clientId, t);
                this.logger.verbose(
                  "Retrieving all access tokens from cache and removing duplicates"
                );
                for (var u = 0; u < l.length; u++) {
                  var h = l[u];
                  if (
                    h.key.homeAccountIdentifier ===
                    e.account.homeAccountIdentifier
                  ) {
                    var d = h.key.scopes.split(" ");
                    me.isIntersectingScopes(d, s) &&
                      this.cacheStorage.removeItem(JSON.stringify(h.key));
                  }
                }
                (r.accessToken = o[c.ACCESS_TOKEN]), (r.scopes = s);
                var p = _e.parseExpiresIn(o[c.EXPIRES_IN]),
                  g = Ne.parseLibraryState(o[c.STATE]).ts + p;
                return (
                  this.logger.verbose("Saving access token to cache"),
                  this.saveToken(r, t, a, n, g)
                );
              }),
              (e.prototype.saveTokenFromHash = function(e, t) {
                this.logger.verbose("SaveTokenFromHash has been called"),
                  this.logger.info(
                    "State status: " +
                      t.stateMatch +
                      "; Request type: " +
                      t.requestType
                  );
                var o,
                  n = {
                    uniqueId: "",
                    tenantId: "",
                    tokenType: "",
                    idToken: null,
                    idTokenClaims: null,
                    accessToken: null,
                    scopes: [],
                    expiresOn: null,
                    account: null,
                    accountState: "",
                    fromCache: !1
                  },
                  r = ve.deserializeHash(e),
                  i = "",
                  a = "",
                  s = null;
                if (
                  r.hasOwnProperty(c.ERROR_DESCRIPTION) ||
                  r.hasOwnProperty(c.ERROR)
                ) {
                  if (
                    (this.logger.verbose("Server returned an error"),
                    this.logger.infoPii(
                      "Error : " +
                        r[c.ERROR] +
                        "; Error description: " +
                        r[c.ERROR_DESCRIPTION]
                    ),
                    this.cacheStorage.setItem(p.ERROR, r[c.ERROR]),
                    this.cacheStorage.setItem(
                      p.ERROR_DESC,
                      r[c.ERROR_DESCRIPTION]
                    ),
                    t.requestType === u.login &&
                      (this.logger.verbose(
                        "RequestType is login, caching login error, generating authorityKey"
                      ),
                      this.cacheStorage.setItem(
                        p.LOGIN_ERROR,
                        r[c.ERROR_DESCRIPTION] + ":" + r[c.ERROR]
                      ),
                      (i = xe.generateAuthorityKey(t.state))),
                    t.requestType === u.renewToken)
                  ) {
                    this.logger.verbose(
                      "RequestType is renewToken, generating acquireTokenAccountKey"
                    ),
                      (i = xe.generateAuthorityKey(t.state));
                    var l = this.getAccount(),
                      g = void 0;
                    l && !k.isEmpty(l.homeAccountIdentifier)
                      ? ((g = l.homeAccountIdentifier),
                        this.logger.verbose("AccountId is set"))
                      : ((g = u.no_account),
                        this.logger.verbose("AccountId is set as no_account")),
                      (a = xe.generateAcquireTokenAccountKey(g, t.state));
                  }
                  var f = r[c.ERROR],
                    m = r[c.ERROR_DESCRIPTION];
                  o =
                    Be.isInteractionRequiredError(f) ||
                    Be.isInteractionRequiredError(m)
                      ? new Be(r[c.ERROR], r[c.ERROR_DESCRIPTION])
                      : new $e(r[c.ERROR], r[c.ERROR_DESCRIPTION]);
                } else if (
                  (this.logger.verbose("Server returns success"), t.stateMatch)
                ) {
                  this.logger.info("State is right"),
                    r.hasOwnProperty(c.SESSION_STATE) &&
                      (this.logger.verbose(
                        "Fragment has session state, caching"
                      ),
                      this.cacheStorage.setItem(
                        xe.generateTemporaryCacheKey(h.SESSION_STATE, t.state),
                        r[c.SESSION_STATE]
                      )),
                    (n.accountState = this.getAccountState(t.state));
                  var v = void 0;
                  if (r.hasOwnProperty(c.ACCESS_TOKEN)) {
                    this.logger.info("Fragment has access token"),
                      (n.accessToken = r[c.ACCESS_TOKEN]),
                      r.hasOwnProperty(c.SCOPE) &&
                        (n.scopes = r[c.SCOPE].split(" ")),
                      r.hasOwnProperty(c.ID_TOKEN)
                        ? (this.logger.verbose("Fragment has id_token"),
                          (s = new Re(r[c.ID_TOKEN])))
                        : (this.logger.verbose(
                            "No idToken on fragment, getting idToken from cache"
                          ),
                          (s = new Re(this.cacheStorage.getItem(d.IDTOKEN)))),
                      (n = Ue.setResponseIdToken(n, s));
                    var y = this.populateAuthority(
                      t.state,
                      this.inCookie,
                      this.cacheStorage,
                      s
                    );
                    this.logger.verbose("Got authority from cache"),
                      r.hasOwnProperty(c.CLIENT_INFO)
                        ? (this.logger.verbose("Fragment has clientInfo"),
                          (v = new Ee(r[c.CLIENT_INFO], y)))
                        : this.authorityInstance.AuthorityType === b.Adfs
                          ? (v = Ee.createClientInfoFromIdToken(s, y))
                          : this.logger.warning(
                              "ClientInfo not received in the response from AAD"
                            ),
                      (n.account = Le.createAccount(s, v)),
                      this.logger.verbose(
                        "Account object created from response"
                      );
                    var w = void 0;
                    n.account && !k.isEmpty(n.account.homeAccountIdentifier)
                      ? (this.logger.verbose("AccountKey set"),
                        (w = n.account.homeAccountIdentifier))
                      : (this.logger.verbose("AccountKey set as no_account"),
                        (w = u.no_account)),
                      (a = xe.generateAcquireTokenAccountKey(w, t.state));
                    var T = xe.generateAcquireTokenAccountKey(
                      u.no_account,
                      t.state
                    );
                    this.logger.verbose("AcquireTokenAccountKey generated");
                    var C = this.cacheStorage.getItem(a),
                      I = void 0;
                    k.isEmpty(C)
                      ? k.isEmpty(this.cacheStorage.getItem(T)) ||
                        (this.logger.verbose(
                          "No acquireToken account retrieved from cache"
                        ),
                        (n = this.saveAccessToken(n, y, r, v)))
                      : ((I = JSON.parse(C)),
                        this.logger.verbose(
                          "AcquireToken request account retrieved from cache"
                        ),
                        n.account && I && Le.compareAccounts(n.account, I)
                          ? ((n = this.saveAccessToken(n, y, r, v)),
                            this.logger.info(
                              "The user object received in the response is the same as the one passed in the acquireToken request"
                            ))
                          : this.logger.warning(
                              "The account object created from the response is not the same as the one passed in the acquireToken request"
                            ));
                  }
                  if (r.hasOwnProperty(c.ID_TOKEN)) {
                    this.logger.info("Fragment has idToken"),
                      (s = new Re(r[c.ID_TOKEN]));
                    y = this.populateAuthority(
                      t.state,
                      this.inCookie,
                      this.cacheStorage,
                      s
                    );
                    if (
                      ((n = Ue.setResponseIdToken(n, s)),
                      r.hasOwnProperty(c.CLIENT_INFO)
                        ? (this.logger.verbose("Fragment has clientInfo"),
                          (v = new Ee(r[c.CLIENT_INFO], y)))
                        : this.authorityInstance.AuthorityType === b.Adfs
                          ? (v = Ee.createClientInfoFromIdToken(s, y))
                          : this.logger.warning(
                              "ClientInfo not received in the response from AAD"
                            ),
                      (this.account = Le.createAccount(s, v)),
                      (n.account = this.account),
                      this.logger.verbose(
                        "Account object created from response"
                      ),
                      s && s.nonce)
                    ) {
                      this.logger.verbose("IdToken has nonce");
                      var S = this.cacheStorage.getItem(
                        xe.generateTemporaryCacheKey(h.NONCE_IDTOKEN, t.state),
                        this.inCookie
                      );
                      s.nonce !== S
                        ? ((this.account = null),
                          this.cacheStorage.setItem(
                            p.LOGIN_ERROR,
                            "Nonce Mismatch. Expected Nonce: " +
                              S +
                              ",Actual Nonce: " +
                              s.nonce
                          ),
                          this.logger.error(
                            "Nonce Mismatch. Expected Nonce: " +
                              S +
                              ", Actual Nonce: " +
                              s.nonce
                          ),
                          (o = B.createNonceMismatchError(S, s.nonce)))
                        : (this.logger.verbose(
                            "Nonce matches, saving idToken to cache"
                          ),
                          this.cacheStorage.setItem(
                            d.IDTOKEN,
                            r[c.ID_TOKEN],
                            this.inCookie
                          ),
                          this.cacheStorage.setItem(
                            d.CLIENT_INFO,
                            v.encodeClientInfo(),
                            this.inCookie
                          ),
                          this.saveIdToken(n, y, r, v, s));
                    } else
                      this.logger.verbose(
                        "No idToken or no nonce. Cache key for Authority set as state"
                      ),
                        (i = t.state),
                        (a = t.state),
                        this.logger.error(
                          "Invalid id_token received in the response"
                        ),
                        (o = B.createInvalidIdTokenError(s)),
                        this.cacheStorage.setItem(p.ERROR, o.errorCode),
                        this.cacheStorage.setItem(p.ERROR_DESC, o.errorMessage);
                  }
                } else {
                  this.logger.verbose("State mismatch"),
                    (i = t.state),
                    (a = t.state);
                  var A = this.cacheStorage.getItem(
                    xe.generateTemporaryCacheKey(h.STATE_LOGIN, t.state),
                    this.inCookie
                  );
                  this.logger.error(
                    "State Mismatch. Expected State: " +
                      A +
                      ", Actual State: " +
                      t.state
                  ),
                    (o = B.createInvalidStateError(t.state, A)),
                    this.cacheStorage.setItem(p.ERROR, o.errorCode),
                    this.cacheStorage.setItem(p.ERROR_DESC, o.errorMessage);
                }
                if (
                  (this.cacheStorage.removeItem(
                    xe.generateTemporaryCacheKey(h.RENEW_STATUS, t.state)
                  ),
                  this.cacheStorage.resetTempCacheItems(t.state),
                  this.logger.verbose(
                    "Status set to complete, temporary cache cleared"
                  ),
                  this.inCookie &&
                    (this.logger.verbose(
                      "InCookie is true, setting authorityKey in cookie"
                    ),
                    this.cacheStorage.setItemCookie(i, "", -1),
                    this.cacheStorage.clearMsalCookie(t.state)),
                  o)
                )
                  throw o;
                if (!n) throw _.createUnexpectedError("Response is null");
                return n;
              }),
              (e.prototype.populateAuthority = function(e, t, o, n) {
                this.logger.verbose("PopulateAuthority has been called");
                var r = xe.generateAuthorityKey(e),
                  i = o.getItem(r, t);
                return k.isEmpty(i) ? i : ve.replaceTenantPath(i, n.tenantId);
              }),
              (e.prototype.getAccount = function() {
                if (this.account) return this.account;
                var e = this.cacheStorage.getItem(d.IDTOKEN, this.inCookie),
                  t = this.cacheStorage.getItem(d.CLIENT_INFO, this.inCookie);
                if (!k.isEmpty(e) && !k.isEmpty(t)) {
                  var o = new Re(e),
                    n = new Ee(t, "");
                  return (this.account = Le.createAccount(o, n)), this.account;
                }
                return null;
              }),
              (e.prototype.getAccountState = function(e) {
                if (e) {
                  var t = e.indexOf(u.resourceDelimiter);
                  if (t > -1 && t + 1 < e.length) return e.substring(t + 1);
                }
                return e;
              }),
              (e.prototype.getAllAccounts = function() {
                for (
                  var e = [],
                    t = this.cacheStorage.getAllAccessTokens(
                      u.clientId,
                      u.homeAccountIdentifier
                    ),
                    o = 0;
                  o < t.length;
                  o++
                ) {
                  var n = new Re(t[o].value.idToken),
                    r = new Ee(t[o].value.homeAccountIdentifier, ""),
                    i = Le.createAccount(n, r);
                  e.push(i);
                }
                return this.getUniqueAccounts(e);
              }),
              (e.prototype.getUniqueAccounts = function(e) {
                if (!e || e.length <= 1) return e;
                for (var t = [], o = [], n = 0; n < e.length; ++n)
                  e[n].homeAccountIdentifier &&
                    -1 === t.indexOf(e[n].homeAccountIdentifier) &&
                    (t.push(e[n].homeAccountIdentifier), o.push(e[n]));
                return o;
              }),
              (e.prototype.broadcast = function(e, t) {
                var o = new CustomEvent(e, { detail: t });
                window.dispatchEvent(o);
              }),
              (e.prototype.getCachedTokenInternal = function(e, t, o, n) {
                var r = t || this.getAccount();
                if (!r) return null;
                var i = this.authorityInstance
                    ? this.authorityInstance
                    : qe.CreateInstance(
                        this.authority,
                        this.config.auth.validateAuthority
                      ),
                  a = this.getTokenType(r, e),
                  s = new Te(
                    i,
                    this.clientId,
                    a,
                    this.getRedirectUri(),
                    e,
                    o,
                    n
                  );
                return this.getCachedToken(s, t);
              }),
              (e.prototype.getScopesForEndpoint = function(e) {
                if (this.config.framework.unprotectedResources.length > 0)
                  for (
                    var t = 0;
                    t < this.config.framework.unprotectedResources.length;
                    t++
                  )
                    if (
                      e.indexOf(this.config.framework.unprotectedResources[t]) >
                      -1
                    )
                      return null;
                if (this.config.framework.protectedResourceMap.size > 0)
                  for (
                    var o = 0,
                      n = Array.from(
                        this.config.framework.protectedResourceMap.keys()
                      );
                    o < n.length;
                    o++
                  ) {
                    var r = n[o];
                    if (e.indexOf(r) > -1)
                      return this.config.framework.protectedResourceMap.get(r);
                  }
                return e.indexOf("http://") > -1 || e.indexOf("https://") > -1
                  ? ve.getHostFromUri(e) ===
                    ve.getHostFromUri(this.getRedirectUri())
                    ? new Array(this.clientId)
                    : null
                  : new Array(this.clientId);
              }),
              (e.prototype.getLoginInProgress = function() {
                return this.cacheStorage.isInteractionInProgress(!0);
              }),
              (e.prototype.setInteractionInProgress = function(e) {
                this.cacheStorage.setInteractionInProgress(e);
              }),
              (e.prototype.setloginInProgress = function(e) {
                this.setInteractionInProgress(e);
              }),
              (e.prototype.getAcquireTokenInProgress = function() {
                return this.cacheStorage.isInteractionInProgress(!0);
              }),
              (e.prototype.setAcquireTokenInProgress = function(e) {
                this.setInteractionInProgress(e);
              }),
              (e.prototype.getLogger = function() {
                return this.logger;
              }),
              (e.prototype.setLogger = function(e) {
                this.logger = e;
              }),
              (e.prototype.getRedirectUri = function(e) {
                return (
                  e ||
                  ("function" == typeof this.config.auth.redirectUri
                    ? this.config.auth.redirectUri()
                    : this.config.auth.redirectUri)
                );
              }),
              (e.prototype.getPostLogoutRedirectUri = function() {
                return "function" ==
                  typeof this.config.auth.postLogoutRedirectUri
                  ? this.config.auth.postLogoutRedirectUri()
                  : this.config.auth.postLogoutRedirectUri;
              }),
              (e.prototype.getCurrentConfiguration = function() {
                if (!this.config) throw fe.createNoSetConfigurationError();
                return this.config;
              }),
              (e.prototype.getTokenType = function(e, t) {
                var o = Le.compareAccounts(e, this.getAccount());
                return Te.determineResponseType(o, t);
              }),
              (e.prototype.setAccountCache = function(e, t) {
                var o = e ? this.getAccountId(e) : u.no_account,
                  n = xe.generateAcquireTokenAccountKey(o, t);
                this.cacheStorage.setItem(n, JSON.stringify(e));
              }),
              (e.prototype.setAuthorityCache = function(e, t) {
                var o = xe.generateAuthorityKey(e);
                this.cacheStorage.setItem(
                  o,
                  ve.CanonicalizeUri(t),
                  this.inCookie
                );
              }),
              (e.prototype.updateCacheEntries = function(e, t, o, n) {
                n &&
                  this.cacheStorage.setItem(
                    xe.generateTemporaryCacheKey(h.LOGIN_REQUEST, e.state),
                    n,
                    this.inCookie
                  ),
                  o
                    ? this.cacheStorage.setItem(
                        xe.generateTemporaryCacheKey(h.STATE_LOGIN, e.state),
                        e.state,
                        this.inCookie
                      )
                    : this.setAccountCache(t, e.state),
                  this.setAuthorityCache(e.state, e.authority),
                  this.cacheStorage.setItem(
                    xe.generateTemporaryCacheKey(h.NONCE_IDTOKEN, e.state),
                    e.nonce,
                    this.inCookie
                  );
              }),
              (e.prototype.getAccountId = function(e) {
                return k.isEmpty(e.homeAccountIdentifier)
                  ? u.no_account
                  : e.homeAccountIdentifier;
              }),
              (e.prototype.buildIDTokenRequest = function(e) {
                return {
                  scopes: u.oidcScopes,
                  authority: this.authority,
                  account: this.getAccount(),
                  extraQueryParameters: e.extraQueryParameters,
                  correlationId: e.correlationId
                };
              }),
              (e.prototype.getTelemetryManagerFromConfig = function(e, t) {
                if (!e) return Ft.getTelemetrymanagerStub(t, this.logger);
                var o = e.applicationName,
                  n = e.applicationVersion,
                  r = e.telemetryEmitter;
                if (!o || !n || !r) throw fe.createTelemetryConfigError(e);
                return new Ft(
                  {
                    platform: { applicationName: o, applicationVersion: n },
                    clientId: t
                  },
                  r,
                  this.logger
                );
              }),
              e
            );
          })();
      },
      747: (e, t) => {
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ActivityPlanTemplateLogic = void 0);
        t.ActivityPlanTemplateLogic = class {
          constructor(e) {
            this.executionContext = e;
          }
          addRuleFilter() {
            const e = this.executionContext.getFormContext(),
              t = e.getAttribute("bhlabs_targetentity"),
              o = e.getControl("bhlabs_genericrule");
            o.addPreSearch(() => {
              o.addCustomFilter(
                `<filter type='and'><condition attribute='bhlabs_targetentity' operator='eq' value='${t.getValue() ||
                  "NULL"}' /></filter>`
              );
            }),
              t.addOnChange(() => {
                o.removePreSearch(() => {
                  o.addPreSearch(() => {
                    o.addCustomFilter(
                      `<filter type='and'><condition attribute='bhlabs_targetentity' operator='eq' value='${t.getValue() ||
                        "NULL"}' /></filter>`
                    );
                  });
                });
              });
          }
          loadFormContext() {
            const e = this.executionContext
              .getFormContext()
              .getAttribute("bhlabs_regardingtype");
            e.getValue() &&
              globalThis.parent.sessionStorage.setItem(
                "regardingType",
                e.getValue().toString()
              ),
              e.addOnChange(() => {
                e.getValue() &&
                  globalThis.parent.sessionStorage.setItem(
                    "regardingType",
                    e.getValue().toString()
                  );
              });
          }
          lockUnlockControls() {
            const e = this.executionContext.getFormContext(),
              t = e.getControl("ActivityTemplates"),
              o = e.getAttribute("bhlabs_activationstatus");
            t.setDisabled(o.getValue()),
              o.addOnChange(() => {
                t.setDisabled(o.getValue());
              });
          }
          publishActivityPlanTemplate(e, t) {
            Xrm.Utility.showProgressIndicator(
              t
                ? "Publishing Activity Plan Template..."
                : "Unpublishing Activity Plan Template..."
            );
            const o = e.data.entity.getId();
            e.data.save().finally(() => {
              Xrm.WebApi.updateRecord("bhlabs_activityplantemplate", o, {
                bhlabs_activationstatus: t
              })
                .then(() => {
                  Xrm.Utility.closeProgressIndicator(),
                    e.data.refresh(!0).then(() => {
                      e.ui.refreshRibbon();
                    });
                })
                .finally(() => {
                  Xrm.Utility.closeProgressIndicator();
                });
            });
          }
        };
      },
      536: (e, t) => {
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ActivityTemplateLogic = void 0);
        t.ActivityTemplateLogic = class {
          constructor(e) {
            (this.executionContext = e),
              (this.formContext = e.getFormContext());
          }
          showHideReminderTriggerRule() {
            const e = this.formContext.getAttribute("bhlabs_activitytype"),
              t = this.formContext.getControl("bhlabs_triggerjson");
            t &&
              e &&
              (e && "task" === e.getValue()
                ? t.setVisible(!0)
                : t.setVisible(!1),
              e.addOnChange(() => {
                e && "task" === e.getValue()
                  ? t.setVisible(!0)
                  : t.setVisible(!1);
              }));
          }
        };
      },
      513: (e, t) => {
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ApprovalLogic = void 0);
        t.ApprovalLogic = class {
          constructor(e) {
            this.executionContext = e;
          }
          showAddSingleApprover(e) {
            Xrm.Navigation.navigateTo(
              {
                name: "bhlabs_addsingelapprover_e89e5",
                entityName: e.data.entity.getEntityName(),
                recordId: e.data.entity
                  .getId()
                  .replace("{", "")
                  .replace("}", ""),
                pageType: "custom"
              },
              { target: 2, width: 1e3, height: 700 }
            ).then(() => {
              e.data.refresh();
            });
          }
          showCancelApproval(e, t) {
            Xrm.Navigation.navigateTo(
              {
                name: "bhlabs_cancelapproval_c7723",
                entityName: "bhlabs_review",
                recordId: e
                  .map(e => e.replace("{", "").replace("}", ""))
                  .join(","),
                pageType: "custom"
              },
              { target: 2, width: 1e3, height: 700 }
            ).then(() => {
              t.data.refresh();
            });
          }
          ApproversSequenceWarning() {
            const e = this.executionContext.getFormContext(),
              t = [];
            let o = 0,
              n = "warning",
              r = e.data.entity.getId();
            null !== r &&
              Xrm.WebApi.retrieveMultipleRecords(
                "bhlabs_approver",
                "?$select=bhlabs_sequence&$filter=(_bhlabs_approval_value eq " +
                  r +
                  ")&$orderby=bhlabs_sequence desc"
              ).then(
                function(r) {
                  for (let e = 0; e < r.entities.length; e++) {
                    let o = r.entities[e];
                    t.push(o.bhlabs_sequence);
                  }
                  for (let e = 0; e < t.length; e++)
                    t[e] !== t.length - e && o++;
                  0 !== o &&
                    (e.ui.setFormNotification(
                      "This approval has missing sequence of approver(s)",
                      "WARNING",
                      n
                    ),
                    setTimeout(function() {
                      e.ui.clearFormNotification(n);
                    }, 15e3));
                },
                function(e) {}
              );
          }
          LockColumns() {
            const e = this.executionContext.getFormContext();
            let t = e.data.entity.getId();
            (t =
              t
                .replace("{", "")
                .replace("}", "")
                .toLowerCase() || "00000000-0000-0000-0000-000000000000"),
              Xrm.WebApi.retrieveRecord(
                "bhlabs_approval",
                t,
                "?$select=_regardingobjectid_value"
              ).then(
                function(t) {
                  let o = t._regardingobjectid_value;
                  Xrm.WebApi.retrieveRecord(
                    "bhlabs_contract",
                    o,
                    "?$select=bhlabs_contractid,bhlabs_contractstage"
                  ).then(
                    function(t) {
                      77172e4 !== t.bhlabs_contractstage &&
                        (e.getControl("subject").setDisabled(!0),
                        e.getControl("regardingobjectid").setDisabled(!0),
                        e.getControl("bhlabs_approvaltype").setDisabled(!0),
                        e.getControl("bhlabs_approvaloutcome").setDisabled(!0),
                        e.getControl("bhlabs_level").setDisabled(!0),
                        e.getControl("ownerid").setDisabled(!0));
                    },
                    function(e) {}
                  );
                },
                function(e) {}
              );
          }
          LockColumnsWhenSingleApprover() {
            const e = this.executionContext.getFormContext();
            771720003 === e.getAttribute("bhlabs_approvaltype").getValue() &&
              (e.getControl("subject").setDisabled(!0),
              e.getControl("bhlabs_approvaltype").setDisabled(!0),
              e.getControl("bhlabs_level").setDisabled(!0));
          }
          addRuleFilter() {
            const e = this.executionContext.getFormContext(),
              t = e.getAttribute("regardingobjectid"),
              o = e.getControl("bhlabs_rule");
            o.addPreSearch(() => {
              const e = null == t ? void 0 : t.getValue(),
                n = e ? e[0].entityType : "NULL";
              o.addCustomFilter(
                `<filter type='and'><condition attribute='bhlabs_targetentity' operator='eq' value='${n}' /></filter>`
              );
            }),
              null == t ||
                t.addOnChange(() => {
                  o.removePreSearch(() => {
                    o.addPreSearch(() => {
                      const e = null == t ? void 0 : t.getValue(),
                        n = e ? e[0].entityType : "NULL";
                      o.addCustomFilter(
                        `<filter type='and'><condition attribute='bhlabs_targetentity' operator='eq' value='${n}' /></filter>`
                      );
                    });
                  });
                });
          }
          removeSingleApproverOption() {
            const e = this.executionContext
              .getFormContext()
              .getControl("bhlabs_approvaltype");
            e && e.removeOption(771720003);
          }
        };
      },
      348: (e, t) => {
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ApprovalTemplateLogic = void 0);
        t.ApprovalTemplateLogic = class {
          constructor(e) {
            this.executionContext = e;
          }
          ApproverTemplateSequenceWarning() {
            const e = this.executionContext.getFormContext(),
              t = [];
            let o = 0,
              n = "warning",
              r = e.data.entity.getId();
            null !== r &&
              Xrm.WebApi.retrieveMultipleRecords(
                "bhlabs_approvertemplate",
                "?$select=bhlabs_sequence&$filter=(_bhlabs_approvaltemplate_value eq " +
                  r +
                  ")&$orderby=bhlabs_sequence desc"
              ).then(
                function(r) {
                  for (let e = 0; e < r.entities.length; e++) {
                    let o = r.entities[e];
                    t.push(o.bhlabs_sequence);
                  }
                  for (let e = 0; e < t.length; e++)
                    t[e] !== t.length - e && o++;
                  0 !== o &&
                    (e.ui.setFormNotification(
                      "This approval template has missing sequence of approver(s).",
                      "WARNING",
                      n
                    ),
                    setTimeout(function() {
                      e.ui.clearFormNotification(n);
                    }, 15e3));
                },
                function(e) {}
              );
          }
        };
      },
      368: (e, t) => {
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ApproverLogic = void 0);
        t.ApproverLogic = class {
          constructor(e) {
            this.executionContext = e;
          }
          setEntityForApprover() {
            let e = ["bhlabs_internaluser"];
            try {
              this.executionContext
                .getFormContext()
                .getControl("bhlabs_approverusercontactid")
                .setEntityTypes(e);
            } catch (e) {
              console.log(e.message);
            }
          }
          LockColumns() {
            const e = this.executionContext.getFormContext();
            let t = e.data.entity.getId();
            1 !== e.ui.getFormType() &&
              ((t = t
                .replace("{", "")
                .replace("}", "")
                .toLowerCase()),
              console.log(t),
              Xrm.WebApi.retrieveRecord(
                "bhlabs_approver",
                t,
                "?$select=_bhlabs_approval_value"
              ).then(
                function(t) {
                  let o = t._bhlabs_approval_value;
                  Xrm.WebApi.retrieveRecord(
                    "bhlabs_approval",
                    o,
                    "?$select=_regardingobjectid_value"
                  ).then(
                    function(t) {
                      let o = t._regardingobjectid_value;
                      Xrm.WebApi.retrieveRecord(
                        "bhlabs_contract",
                        o,
                        "?$select=bhlabs_contractid,bhlabs_contractstage"
                      ).then(
                        function(t) {
                          77172e4 !== t.bhlabs_contractstage &&
                            (e.getControl("bhlabs_sequence").setDisabled(!0),
                            e
                              .getControl("bhlabs_approverusercontactid")
                              .setDisabled(!0),
                            e.getControl("bhlabs_astatus").setDisabled(!0),
                            e
                              .getControl("bhlabs_datetimeupdated")
                              .setDisabled(!0),
                            e.getControl("ownerid").setDisabled(!0));
                        },
                        function(e) {}
                      );
                    },
                    function(e) {}
                  );
                },
                function(e) {}
              ));
          }
        };
      },
      197: (e, t) => {
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ApproverTemplateLogic = void 0);
        t.ApproverTemplateLogic = class {
          constructor(e) {
            this.executionContext = e;
          }
          setEntityForApproverTemplate() {
            let e = ["bhlabs_internaluser"];
            try {
              const t = this.executionContext.getFormContext(),
                o = this.executionContext.getFormContext();
              t.getControl("bhlabs_approverusercontactid").setEntityTypes(e),
                o.getControl("bhlabs_approverusercontactid").setEntityTypes(e);
            } catch (e) {
              console.log(e.message);
            }
          }
          setEntityForApproverTemplateQuick() {
            let e = ["bhlabs_internaluser"];
            try {
              this.executionContext
                .getFormContext()
                .getControl("bhlabs_approverusercontactid")
                .setEntityTypes(e);
            } catch (e) {
              console.log(e.message);
            }
          }
        };
      },
      359: (e, t, o) => {
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ConsensusDocumentLogic = void 0);
        const n = o(610),
          r = o(654);
        t.ConsensusDocumentLogic = class {
          constructor(e) {
            (this.executionContext = e),
              (this.dataService = new n.DataService()),
              (this.dataverseService = new r.DataverseService());
          }
          async setDocumentFrame() {
            var e, t, o, n;
            const r = this.executionContext.getFormContext(),
              i =
                null === (e = r.getAttribute("regardingobjectid")) ||
                void 0 === e
                  ? void 0
                  : e.getValue(),
              a = r.getControl("WebResource_NoPreviewAvailable"),
              s = r.getControl("IFRAME_embed");
            if ((a.setVisible(!1), s.setVisible(!1), i && i.length > 0)) {
              const e = (await this.dataverseService.sharePointGetDocumentLocation(
                  i[0].id,
                  i[0].entityType
                )).DocumentLocationId,
                c = await this.dataverseService.sharePointGetDocuments(e, !0),
                l = parseInt(
                  (null ===
                    (t = r.getAttribute("bhlabs_sharepointdocumentid")) ||
                  void 0 === t
                    ? void 0
                    : t.getValue()) || "0"
                ),
                u = c.find(e => e.documentid === l),
                h = u.absoluteurl;
              let d =
                null === (o = u.readurl) || void 0 === o
                  ? void 0
                  : o.replace("action=view", "action=embedview");
              null === (n = r.getAttribute("bhlabs_sharepointurl")) ||
                void 0 === n ||
                n.setValue(h),
                "" == d && (d = h),
                d && "" !== d.trim()
                  ? (s.setSrc(d), s.setVisible(!0))
                  : h && this.isImageUrl(h)
                    ? (s.setSrc(h), s.setVisible(!0))
                    : a.setVisible(!0);
            }
          }
          isImageUrl(e) {
            var t;
            const o =
              null === (t = e.split(".").pop()) || void 0 === t
                ? void 0
                : t.toLowerCase();
            return !!o && ["jpg", "jpeg", "png", "gif", "bmp"].includes(o);
          }
          editConsensusDocumentInSharePoint(e) {
            var t = e.getAttribute("bhlabs_sharepointurl").getValue();
            window.open(t, "_blank").focus();
          }
        };
      },
      610: function(e, t, o) {
        var n =
            (this && this.__createBinding) ||
            (Object.create
              ? function(e, t, o, n) {
                  void 0 === n && (n = o),
                    Object.defineProperty(e, n, {
                      enumerable: !0,
                      get: function() {
                        return t[o];
                      }
                    });
                }
              : function(e, t, o, n) {
                  void 0 === n && (n = o), (e[n] = t[o]);
                }),
          r =
            (this && this.__setModuleDefault) ||
            (Object.create
              ? function(e, t) {
                  Object.defineProperty(e, "default", {
                    enumerable: !0,
                    value: t
                  });
                }
              : function(e, t) {
                  e.default = t;
                }),
          i =
            (this && this.__importStar) ||
            function(e) {
              if (e && e.__esModule) return e;
              var t = {};
              if (null != e)
                for (var o in e)
                  "default" !== o &&
                    Object.prototype.hasOwnProperty.call(e, o) &&
                    n(t, e, o);
              return r(t, e), t;
            };
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.DataService = void 0);
        const a = i(o(203));
        t.DataService = class {
          async authenticate(e) {
            const t = {
                auth: {
                  clientId: e.clientId,
                  redirectUri: window.location.origin + "/main.aspx",
                  authority: `https://login.microsoftonline.com/${e.tenantId}`
                },
                cache: { cacheLocation: "localStorage" }
              },
              o = new a.UserAgentApplication(t);
            await o.ssoSilent({
              loginHint: e.userEmail,
              scopes: e.scopes,
              authority: `https://login.microsoftonline.com/${e.tenantId}`
            }),
              await this.getToken(o, e);
          }
          async reauthenticate(e) {
            const t = {
                auth: {
                  clientId: e.clientId,
                  redirectUri: window.location.origin + "/main.aspx",
                  authority: `https://login.microsoftonline.com/${e.tenantId}`
                },
                cache: { cacheLocation: "localStorage" }
              },
              o = new a.UserAgentApplication(t);
            await o.loginPopup({
              loginHint: e.userEmail,
              scopes: e.scopes,
              authority: `https://login.microsoftonline.com/${e.tenantId}`
            }),
              await this.getToken(o, e);
          }
          async getToken(e, t) {
            if (e.getAccount())
              try {
                const o = await e.acquireTokenSilent({
                  scopes: t.scopes,
                  authority: `https://login.microsoftonline.com/${t.tenantId}`
                });
                this.authToken = o.accessToken;
              } catch (o) {
                const n = await e.acquireTokenPopup({
                  scopes: t.scopes,
                  authority: `https://login.microsoftonline.com/${t.tenantId}`
                });
                this.authToken = n.accessToken;
              }
          }
          async getEnvironmentVariableValue(e) {
            const t = await fetch(
                `/api/data/v9.0/environmentvariabledefinitions?$filter=schemaname eq '${e}'`
              ),
              o = (await t.json()).value[0],
              n = await fetch(
                `/api/data/v9.0/environmentvariablevalues?$filter=_environmentvariabledefinitionid_value eq ${
                  o.environmentvariabledefinitionid
                }`
              );
            return (await n.json()).value[0].value;
          }
          async getSystemUser(e) {
            const t = await fetch(`/api/data/v9.0/systemusers(${e})`);
            return await t.json();
          }
          parsePath(e) {
            try {
              if (e) {
                const t = decodeURIComponent(decodeURIComponent(e)).replace(
                    /\+/g,
                    " "
                  ),
                  o =
                    "/" + encodeURIComponent(t.split("/")[1].replace("/", ""));
                return [o, t.replace(decodeURIComponent(o), ""), t];
              }
              return ["", "", ""];
            } catch (t) {
              throw `There was an error parsing path(${e}): ${t.message}`;
            }
          }
          async getSharepointDrives(e) {
            try {
              const t = `https://graph.microsoft.com/v1.0/sites/${e}/drives`,
                o = await fetch(t, {
                  headers: { Authorization: "Bearer " + this.authToken }
                });
              if ("Unauthorized" === o.statusText) throw "Unauthorized";
              if ("OK" !== o.statusText) throw o.statusText;
              const n = await o.json();
              return n.value;
            } catch (e) {
              throw (console.log(e),
              `There was an error retrieving Sharepoint drives: ${e.message}`);
            }
          }
          async getSharepointSite(e) {
            try {
              const t = `https://graph.microsoft.com/v1.0/sites/root:/sites/${e}`,
                o = await fetch(t, {
                  headers: { Authorization: "Bearer " + this.authToken }
                });
              if ("Unauthorized" === o.statusText) throw "Unauthorized";
              if ("OK" !== o.statusText) throw o.statusText;
              const n = await o.json();
              return n;
            } catch (e) {
              if ((console.log(e), "Unauthorized" === e)) return e;
              throw `There was an error retrieving Sharepoint Site: ${
                e.message
              }`;
            }
          }
          async getGlobalSettings() {
            const e = await fetch(
              "/api/data/v9.2/bhlabs_consensusadminsettingses"
            );
            return (await e.json()).value[0];
          }
          async test() {
            return console.log("HELLO"), "hello";
          }
          async getSharepointDriveItem(e, t, o) {
            try {
              const n = o
                  ? `https://graph.microsoft.com/v1.0/sites/${e}/drives/${o}/root:${t}?$expand=versions`
                  : `https://graph.microsoft.com/v1.0/sites/${e}/drive/root:/${t}?$expand=versions`,
                r = await fetch(n, {
                  headers: { Authorization: "Bearer " + this.authToken }
                });
              if ("Unauthorized" === r.statusText) throw "Unauthorized";
              if ("OK" !== r.statusText) throw r.statusText;
              const i = await r.json();
              return i;
            } catch (e) {
              throw (console.log(e),
              `There was an error retrieving contract document: ${e}`);
            }
          }
          async getSharepointEmbedLink(e, t, o) {
            try {
              const n = `https://graph.microsoft.com/v1.0/sites/${e}/drives/${t}/items/${o}/preview`,
                r = await fetch(n, {
                  method: "POST",
                  headers: { Authorization: "Bearer " + this.authToken }
                });
              if ("Unauthorized" === r.statusText) throw "Unauthorized";
              if ("OK" !== r.statusText) throw r.statusText;
              const i = await r.json();
              return i;
            } catch (e) {
              throw (console.log(e),
              `There was an error retrieving Sharepoint document embed link: ${
                e.message
              }`);
            }
          }
        };
      },
      385: (e, t) => {
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.NotificationTemplateLogic = void 0);
        t.NotificationTemplateLogic = class {
          constructor(e) {
            this.executionContext = e;
          }
          publishNotificationTemplate(e, t) {
            Xrm.Utility.showProgressIndicator(
              t
                ? "Publishing Notification Template..."
                : "Unpublishing Notification Template..."
            );
            const o = e.data.entity.getId();
            e.data.save().finally(() => {
              Xrm.WebApi.updateRecord("bhlabs_notificationsettings", o, {
                bhlabs_activationstatus: t
              })
                .then(() => {
                  Xrm.Utility.closeProgressIndicator(),
                    e.data.refresh(!0).then(() => {
                      e.ui.refreshRibbon();
                    });
                })
                .finally(() => {
                  Xrm.Utility.closeProgressIndicator();
                });
            });
          }
          enableDisableFields() {
            const e = this.executionContext.getFormContext(),
              t = e.getAttribute("bhlabs_activationstatus"),
              o = e.getControl("bhlabs_name"),
              n = e.getControl("bhlabs_description"),
              r = e.getControl("bhlabs_targetentity"),
              i = e.getControl("bhlabs_deliverymethod"),
              a = e.getControl("bhlabs_triggerrulejson"),
              s = e.getControl("bhlabs_recipients"),
              c = e.getControl("bhlabs_content"),
              l = e.getControl("bhlabs_genericrule"),
              u = e.getControl("bhlabs_subject"),
              h = e.getControl("ownerid"),
              d = e.getControl("bhlabs_adaptivecardcontent"),
              p = e.getControl("bhlabs_regardingtype");
            o.setDisabled(t.getValue()),
              n.setDisabled(t.getValue()),
              r.setDisabled(t.getValue()),
              i.setDisabled(t.getValue()),
              a.setDisabled(t.getValue()),
              s.setDisabled(t.getValue()),
              c.setDisabled(t.getValue()),
              l.setDisabled(t.getValue()),
              u.setDisabled(t.getValue()),
              h.setDisabled(t.getValue()),
              d.setDisabled(t.getValue()),
              p.setDisabled(t.getValue()),
              t.addOnChange(() => {
                o.setDisabled(t.getValue()),
                  n.setDisabled(t.getValue()),
                  r.setDisabled(t.getValue()),
                  i.setDisabled(t.getValue()),
                  a.setDisabled(t.getValue()),
                  s.setDisabled(t.getValue()),
                  c.setDisabled(t.getValue()),
                  l.setDisabled(t.getValue()),
                  u.setDisabled(t.getValue()),
                  h.setDisabled(t.getValue()),
                  d.setDisabled(t.getValue()),
                  p.setDisabled(t.getValue());
              });
          }
          addRuleFilter() {
            const e = this.executionContext.getFormContext(),
              t = e.getAttribute("bhlabs_targetentity"),
              o = e.getControl("bhlabs_genericrule");
            o.addPreSearch(() => {
              o.addCustomFilter(
                `<filter type='and'><condition attribute='bhlabs_targetentity' operator='eq' value='${t.getValue() ||
                  "NULL"}' /></filter>`
              );
            }),
              t.addOnChange(() => {
                o.removePreSearch(() => {
                  o.addPreSearch(() => {
                    o.addCustomFilter(
                      `<filter type='and'><condition attribute='bhlabs_targetentity' operator='eq' value='${t.getValue() ||
                        "NULL"}' /></filter>`
                    );
                  });
                });
              });
          }
        };
      },
      774: (e, t) => {
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.OrganisationLogic = void 0);
        t.OrganisationLogic = class {
          constructor(e) {
            this.executionContext = e;
          }
          RunOnSelected() {
            let e = this.executionContext.getFormContext().data.entity.getId();
            Xrm.Navigation.navigateTo(
              { pageType: "entityrecord", entityName: "contact", entityId: e },
              { target: 2, width: { value: 80, unit: "%" }, position: 1 }
            ).then(function() {}, function() {});
          }
        };
      },
      589: (e, t) => {
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ReviewLogic = void 0);
        t.ReviewLogic = class {
          constructor(e) {
            this.executionContext = e;
          }
          showAddSingleReviewer(e) {
            Xrm.Navigation.navigateTo(
              {
                name: "bhlabs_singlereviewer_420ef",
                entityName: e.data.entity.getEntityName(),
                recordId: e.data.entity
                  .getId()
                  .replace("{", "")
                  .replace("}", ""),
                pageType: "custom"
              },
              { target: 2, width: 1e3, height: 700 }
            ).then(() => {
              e.data.refresh();
            });
          }
          showCancelReview(e, t) {
            Xrm.Navigation.navigateTo(
              {
                name: "bhlabs_cancelreview_f9a0e",
                entityName: "bhlabs_review",
                recordId: e
                  .map(e => e.replace("{", "").replace("}", ""))
                  .join(","),
                pageType: "custom"
              },
              { target: 2, width: 1e3, height: 700 }
            ).then(() => {
              t.data.refresh();
            });
          }
          ReviewersSequenceWarning() {
            const e = this.executionContext.getFormContext(),
              t = [];
            let o = 0,
              n = "warningReview",
              r = e.data.entity.getId();
            null !== r &&
              Xrm.WebApi.retrieveMultipleRecords(
                "bhlabs_reviewer",
                "?$select=bhlabs_sequence&$filter=(_bhlabs_review_value eq " +
                  r +
                  ")&$orderby=bhlabs_sequence desc"
              ).then(
                function(r) {
                  for (let e = 0; e < r.entities.length; e++) {
                    let o = r.entities[e];
                    t.push(o.bhlabs_sequence);
                  }
                  for (let e = 0; e < t.length; e++)
                    t[e] !== t.length - e && o++;
                  0 !== o &&
                    (e.ui.setFormNotification(
                      "This review has missing sequence of reviewer(s)",
                      "WARNING",
                      n
                    ),
                    setTimeout(function() {
                      e.ui.clearFormNotification(n);
                    }, 15e3));
                },
                function(e) {}
              );
          }
          removeSingleRemoverOption() {
            const e = this.executionContext
              .getFormContext()
              .getControl("bhlabs_reviewtype");
            e && e.removeOption(771720003);
          }
          addRuleFilter() {
            const e = this.executionContext.getFormContext(),
              t = e.getAttribute("regardingobjectid"),
              o = e.getControl("bhlabs_rule");
            o.addPreSearch(() => {
              const e = null == t ? void 0 : t.getValue(),
                n = e ? e[0].entityType : "NULL";
              o.addCustomFilter(
                `<filter type='and'><condition attribute='bhlabs_targetentity' operator='eq' value='${n}' /></filter>`
              );
            }),
              null == t ||
                t.addOnChange(() => {
                  o.removePreSearch(() => {
                    o.addPreSearch(() => {
                      const e = null == t ? void 0 : t.getValue(),
                        n = e ? e[0].entityType : "NULL";
                      o.addCustomFilter(
                        `<filter type='and'><condition attribute='bhlabs_targetentity' operator='eq' value='${n}' /></filter>`
                      );
                    });
                  });
                });
          }
        };
      },
      278: (e, t) => {
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ReviewTemplateLogic = void 0);
        t.ReviewTemplateLogic = class {
          constructor(e) {
            this.executionContext = e;
          }
          showNotification() {
            const e = this.executionContext.getFormContext();
            var t =
                "?fetchXml=<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false'><entity name='bhlabs_reviewertemplate'><attribute name='bhlabs_reviewertemplateid' /><attribute name='bhlabs_reviewtemplate' /><attribute name='bhlabs_sequence' /><attribute name='bhlabs_reviewerid' /><order attribute='bhlabs_reviewtemplate' descending='false' /><filter type='and'><condition attribute='bhlabs_reviewtemplate' operator='eq'  uitype='bhlabs_reviewtemplate' value='" +
                e.data.entity.getId() +
                "' /></filter></entity></fetch>",
              o = [],
              n = [];
            Xrm.WebApi.retrieveMultipleRecords(
              "bhlabs_reviewertemplate",
              t
            ).then(
              function(t) {
                for (var r = 0; r < t.entities.length; r++)
                  n.push(t.entities[r].bhlabs_sequence);
                var i = n[n.length - 1];
                for (r = 1; r <= i; r++) -1 == n.indexOf(r) && o.push(r);
                console.log(o),
                  0 == o.length
                    ? (console.log("No Notification"),
                      e.ui.clearFormNotification("MissingSequence"))
                    : (console.log("Should have notification"),
                      e.ui.setFormNotification(
                        "The reviewer templates on this review template have missing level(s).",
                        "WARNING",
                        "MissingSequence"
                      ));
              },
              function(e) {
                console.log(e.message);
              }
            );
          }
        };
      },
      619: (e, t) => {
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ReviewerLogic = void 0);
        t.ReviewerLogic = class {
          constructor(e) {
            this.executionContext = e;
          }
          setEntityForReviewer() {
            let e = ["bhlabs_internaluser"];
            try {
              this.executionContext
                .getFormContext()
                .getControl("bhlabs_reviewercontactuserid")
                .setEntityTypes(e);
            } catch (e) {
              console.log(e.message);
            }
          }
        };
      },
      803: (e, t) => {
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ReviewerTemplateLogic = void 0);
        t.ReviewerTemplateLogic = class {
          constructor(e) {
            this.executionContext = e;
          }
          setEntityForReviewerTemplate() {
            let e = ["bhlabs_internaluser"];
            try {
              this.executionContext
                .getFormContext()
                .getControl("bhlabs_reviewerid")
                .setEntityTypes(e);
            } catch (e) {
              console.log(e.message);
            }
          }
          setEntityForReviewerTemplateQuick() {
            let e = ["bhlabs_internaluser"];
            try {
              this.executionContext
                .getFormContext()
                .getControl("bhlabs_reviewerid")
                .setEntityTypes(e);
            } catch (e) {
              console.log(e.message);
            }
          }
        };
      },
      116: (e, t) => {
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.RuleLogic = void 0);
        t.RuleLogic = class {
          constructor(e) {
            this.executionContext = e;
          }
          validateFetchXml() {
            this.executionContext
              .getFormContext()
              .getAttribute("bhlabs_fetchxml")
              .getValue() ||
              (Xrm.Navigation.openAlertDialog({
                text:
                  "No conditions specified. Please review the rule designer.",
                confirmButtonLabel: "Ok"
              }),
              this.executionContext.getEventArgs().preventDefault());
          }
        };
      },
      944: (e, t) => {
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.TaskLogic = void 0);
        t.TaskLogic = class {
          constructor(e) {
            this.executionContext = e;
          }
          setDefaultDeliveryMethod() {
            const e = this.executionContext.getFormContext();
            null == e.getAttribute("subject").getValue() &&
              e.getAttribute("bhlabs_deliverymethod").setValue([77172e4]);
          }
          setDefaultDeliveryMethodQuickCreate() {
            const e = this.executionContext.getFormContext();
            null == e.getAttribute("subject").getValue() &&
              e.getAttribute("bhlabs_deliverymethod").setValue([77172e4]);
          }
          getOriginalOwner() {
            var e;
            let t = !1;
            const o = this.executionContext.getFormContext();
            var n = o.getAttribute("ownerid"),
              r =
                null === (e = o.getAttribute("ownerid")) || void 0 === e
                  ? void 0
                  : e.getValue(),
              i = { entityType: r[0].entityType, id: r[0].id, name: r[0].name };
            return (
              null == n ||
                n.addOnChange(() => {
                  var e;
                  if (
                    null !==
                      (null === (e = o.getAttribute("ownerid")) || void 0 === e
                        ? void 0
                        : e.getValue()) &&
                    0 == t
                  ) {
                    const e =
                      "If the task owner and task assignee is the same person, changing the task owner will also change the assignee. Please confirm.";
                    Xrm.Navigation.openConfirmDialog({
                      text: e,
                      title: "Confirm Owner Change",
                      confirmButtonLabel: "Confirm",
                      cancelButtonLabel: "Cancel"
                    }).then(e => {
                      e.confirmed || o.getAttribute("ownerid").setValue([i]);
                    }),
                      (t = !0);
                  }
                }),
              r
            );
          }
          getOriginalAssigned() {
            var e;
            const t = this.executionContext.getFormContext();
            try {
              return (null === (e = t.getAttribute("bhlabs_assignedtoid")) ||
              void 0 === e
                ? void 0
                : e.getValue())[0].id;
            } catch {
              return "";
            }
          }
          confirmOwnerChange(e, t, o) {
            var n,
              r,
              i = Xrm.Utility.getGlobalContext();
            const a = this.executionContext.getEventArgs(),
              s = this.executionContext.getFormContext(),
              c =
                null === (n = s.getAttribute("ownerid")) || void 0 === n
                  ? void 0
                  : n.getValue();
            try {
              var l = (null === (r = s.getAttribute("bhlabs_assignedtoid")) ||
              void 0 === r
                ? void 0
                : r.getValue())[0].id;
            } catch {
              l = "";
            }
            var u = c[0].entityType,
              h = e[0].id;
            console.log("Start confirmOwnerChange"),
              console.log("Orig Owner & Assigned On Load: " + h + " & " + t),
              console.log("Is Orig aissgned & Assigned equal: " + l == t),
              console.log(h == t && l == t && "systemuser" == u);
            h == t &&
              l == t &&
              "systemuser" == u &&
              s.data.entity.addOnPostSave(async function(e) {
                var t = { EntityId: s.data.entity.getId() },
                  o = new XMLHttpRequest();
                o.open(
                  "POST",
                  i.getClientUrl() +
                    "/api/data/v9.0/workflows(3f326001-c130-ee11-bdf3-00224893b94f)/Microsoft.Dynamics.CRM.ExecuteWorkflow",
                  !0
                ),
                  o.setRequestHeader("OData-MaxVersion", "4.0"),
                  o.setRequestHeader("OData-Version", "4.0"),
                  o.setRequestHeader("Accept", "application/json"),
                  o.setRequestHeader(
                    "Content-Type",
                    "application/json; charset=utf-8"
                  ),
                  (o.onreadystatechange = function() {
                    4 === this.readyState &&
                      ((o.onreadystatechange = null), this.status);
                  }),
                  o.send(JSON.stringify(t)),
                  s.data.refresh(!0);
              }),
              a.getSaveMode();
          }
          showConfirmMessage() {
            const e = this.executionContext.getFormContext();
            e.data.save(), e.data.refresh();
          }
          reopenTask(e) {
            var t;
            const o =
                null === (t = e.getAttribute("subject")) || void 0 === t
                  ? void 0
                  : t.getValue(),
              n = `Are you sure you want to reopen ${o || "this task"}?`;
            Xrm.Navigation.openConfirmDialog({
              text: n,
              title: "Reopen Task",
              confirmButtonLabel: "Yes",
              cancelButtonLabel: "Cancel"
            }).then(t => {
              var o, n;
              t.confirmed &&
                (null === (o = e.getAttribute("statecode")) ||
                  void 0 === o ||
                  o.setValue(0),
                null === (n = e.getAttribute("statuscode")) ||
                  void 0 === n ||
                  n.setValue(3),
                e.data.save(),
                e.data.refresh());
            });
          }
          reopenTasks(e) {
            Xrm.Navigation.openConfirmDialog({
              text: "Are you sure you want to reopen selected task(s)?",
              title: "Reopen Task",
              confirmButtonLabel: "Yes",
              cancelButtonLabel: "Cancel"
            }).then(async t => {
              if (t.confirmed) {
                Xrm.Utility.showProgressIndicator(
                  "Reopening selected task(s)..."
                );
                for (const t of e)
                  "task" === t.TypeName &&
                    (await Xrm.WebApi.updateRecord("task", t.Id, {
                      statecode: 0,
                      statuscode: 3
                    }));
                Xrm.Utility.closeProgressIndicator(),
                  window.parent.location.reload(),
                  window.location.reload();
              }
            });
          }
          setAssignedTo() {
            let e = ["bhlabs_internaluser", "contact", "systemuser"];
            try {
              this.executionContext
                .getFormContext()
                .getControl("bhlabs_assignedtoid")
                .setEntityTypes(e);
            } catch (e) {
              console.log(e.message);
            }
          }
        };
      },
      607: (e, t, o) => {
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BHConsensusApp = void 0);
        const n = o(385),
          r = o(513),
          i = o(348),
          a = o(774),
          s = o(368),
          c = o(197),
          l = o(747),
          u = o(278),
          h = o(359),
          d = o(589),
          p = o(619),
          g = o(803),
          f = o(536),
          m = o(944),
          v = o(116);
        !(function(e) {
          let t, o, y, b, w, T, C, I, S, A;
          let E, _, k, R, O, P;
          !(function(e) {
            (e.publishNotificationTemplate = function(e) {
              new n.NotificationTemplateLogic().publishNotificationTemplate(
                e,
                !0
              );
            }),
              (e.editConsensusDocument = function(e) {
                new h.ConsensusDocumentLogic().editConsensusDocumentInSharePoint(
                  e
                );
              }),
              (e.unpublishNotificationTemplate = function(e) {
                new n.NotificationTemplateLogic().publishNotificationTemplate(
                  e,
                  !1
                );
              }),
              (e.publishActivityPlanTemplate = function(e) {
                new l.ActivityPlanTemplateLogic().publishActivityPlanTemplate(
                  e,
                  !0
                );
              }),
              (e.unpublishActivityPlanTemplate = function(e) {
                new l.ActivityPlanTemplateLogic().publishActivityPlanTemplate(
                  e,
                  !1
                );
              }),
              (e.isPublishVisible = function(e) {
                return !e.getAttribute("bhlabs_activationstatus").getValue();
              }),
              (e.isUnpublishVisible = function(e) {
                return e.getAttribute("bhlabs_activationstatus").getValue();
              });
          })((t = e.Ribbon || (e.Ribbon = {}))),
            (function(e) {
              (e.onSave = async function(e) {
                console.log("Script Execution: On Save"),
                  new a.OrganisationLogic(e);
              }),
                (e.onLoad = async function(e) {
                  console.log("Script Execution: On Load"),
                    new a.OrganisationLogic(e);
                }),
                (e.onRecordSelect = async function(e) {
                  console.log("Script Execution: On Record Select"),
                    new a.OrganisationLogic(e).RunOnSelected();
                });
            })((o = e.Organisation || (e.Organisation = {}))),
            (function(e) {
              let t;
              !(function(e) {
                (e.showAddSingleApprover = function(e) {
                  new r.ApprovalLogic().showAddSingleApprover(e);
                }),
                  (e.showCancelApproval = function(e, t) {
                    new r.ApprovalLogic().showCancelApproval(e, t);
                  });
              })((t = e.Ribbon || (e.Ribbon = {}))),
                (e.onSave = async function(e) {
                  console.log("Script Execution: On Save"),
                    new r.ApprovalLogic(e);
                }),
                (e.onLoad = async function(e) {
                  console.log("Script Execution: On Load");
                  const t = new r.ApprovalLogic(e);
                  t.ApproversSequenceWarning(),
                    t.LockColumns(),
                    t.LockColumnsWhenSingleApprover(),
                    t.addRuleFilter(),
                    t.removeSingleApproverOption();
                });
            })((y = e.Approval || (e.Approval = {}))),
            (function(e) {
              (e.onSave = async function(e) {
                console.log("Script Execution: On Save"),
                  new i.ApprovalTemplateLogic(e);
              }),
                (e.onLoad = async function(e) {
                  console.log("Script Execution: On Load"),
                    new i.ApprovalTemplateLogic(
                      e
                    ).ApproverTemplateSequenceWarning();
                });
            })((b = e.ApprovalTemplate || (e.ApprovalTemplate = {}))),
            (function(e) {
              (e.onSave = async function(e) {
                console.log("Script Execution: On Save"),
                  new s.ApproverLogic(e);
              }),
                (e.onLoad = async function(e) {
                  console.log("Script Execution: On Load");
                  const t = new s.ApproverLogic(e);
                  t.LockColumns(), t.setEntityForApprover();
                });
            })((w = e.Approver || (e.Approver = {}))),
            (function(e) {
              (e.onSave = async function(e) {
                console.log("Script Execution: On Save"),
                  new c.ApproverTemplateLogic(e);
              }),
                (e.onLoad = async function(e) {
                  console.log("Script Execution: On Load");
                  const t = new c.ApproverTemplateLogic(e);
                  t.setEntityForApproverTemplate(),
                    t.setEntityForApproverTemplateQuick();
                });
            })((T = e.ApproverTemplate || (e.ApproverTemplate = {}))),
            (function(e) {
              e.onLoad = async function(e) {
                console.log("Script Execution: On Load");
                const t = new l.ActivityPlanTemplateLogic(e);
                t.lockUnlockControls(), t.addRuleFilter(), t.loadFormContext();
              };
            })((C = e.ActivityPlanTemplate || (e.ActivityPlanTemplate = {}))),
            (function(e) {
              e.onLoad = async function(e) {
                console.log("Script Execution: On Load"),
                  new f.ActivityTemplateLogic(e).showHideReminderTriggerRule();
              };
            })((I = e.ActivityTemplate || (e.ActivityTemplate = {}))),
            (function(e) {
              e.onLoad = async function(e) {
                console.log("Script Execution: On Load");
                const t = new n.NotificationTemplateLogic(e);
                t.addRuleFilter(), t.enableDisableFields();
              };
            })((S = e.NotificationTemplate || (e.NotificationTemplate = {}))),
            ((A =
              e.ReviewTemplate ||
              (e.ReviewTemplate = {})).onLoad = async function(e) {
              console.log("Script Execution: On Load"),
                new u.ReviewTemplateLogic(e).showNotification();
            }),
            (function(e) {
              e.onLoad = async function(e) {
                console.log("Script Execution: On Load"),
                  new h.ConsensusDocumentLogic(e).setDocumentFrame();
              };
            })((E = e.ConsensusDocument || (e.ConsensusDocument = {}))),
            (function(e) {
              let t;
              !(function(e) {
                (e.showAddSingleReviewer = function(e) {
                  new d.ReviewLogic().showAddSingleReviewer(e);
                }),
                  (e.showCancelReview = function(e, t) {
                    new d.ReviewLogic().showCancelReview(e, t);
                  });
              })((t = e.Ribbon || (e.Ribbon = {}))),
                (e.onLoad = async function(e) {
                  console.log("Script Execution: On Load");
                  const t = new d.ReviewLogic(e);
                  t.ReviewersSequenceWarning(),
                    t.addRuleFilter(),
                    t.removeSingleRemoverOption();
                });
            })((_ = e.Review || (e.Review = {}))),
            (function(e) {
              (e.onSave = async function(e) {
                console.log("Script Execution: On Save"),
                  new p.ReviewerLogic(e);
              }),
                (e.onLoad = async function(e) {
                  console.log("Script Execution: On Load"),
                    new p.ReviewerLogic(e).setEntityForReviewer();
                });
            })((k = e.Reviewer || (e.Reviewer = {}))),
            (function(e) {
              (e.onSave = async function(e) {
                console.log("Script Execution: On Save"),
                  new g.ReviewerTemplateLogic(e);
              }),
                (e.onLoad = async function(e) {
                  console.log("Script Execution: On Load");
                  const t = new g.ReviewerTemplateLogic(e);
                  t.setEntityForReviewerTemplate(),
                    t.setEntityForReviewerTemplateQuick();
                });
            })((R = e.ReviewerTemplate || (e.ReviewerTemplate = {}))),
            (function(e) {
              let t;
              var o, n;
              !(function(e) {
                (e.reopenTask = function(e) {
                  new m.TaskLogic().reopenTask(e);
                }),
                  (e.reopenTasks = function(e) {
                    new m.TaskLogic().reopenTasks(e);
                  });
              })((t = e.Ribbon || (e.Ribbon = {}))),
                (e.onLoad = async function(e) {
                  console.log("Script Execution: On Load");
                  const t = new m.TaskLogic(e);
                  t.setDefaultDeliveryMethod(),
                    t.setDefaultDeliveryMethodQuickCreate(),
                    (o = t.getOriginalOwner()),
                    (n = t.getOriginalAssigned()),
                    t.setAssignedTo();
                }),
                (e.onSave = async function(e) {
                  console.log("Script Execution: On Save"),
                    new m.TaskLogic(e).confirmOwnerChange(o, n, e);
                });
            })((O = e.Task || (e.Task = {}))),
            (function(e) {
              e.onSave = function(e) {
                console.log("Script Execution: On Save"),
                  new v.RuleLogic(e).validateFetchXml();
              };
            })((P = e.Rule || (e.Rule = {})));
        })(t.BHConsensusApp || (t.BHConsensusApp = {}));
      }
    },
    t = {};
  function o(n) {
    var r = t[n];
    if (void 0 !== r) return r.exports;
    var i = (t[n] = { exports: {} });
    return e[n].call(i.exports, i, i.exports, o), i.exports;
  }
  (o.d = (e, t) => {
    for (var n in t)
      o.o(t, n) &&
        !o.o(e, n) &&
        Object.defineProperty(e, n, { enumerable: !0, get: t[n] });
  }),
    (o.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t)),
    (o.r = e => {
      "undefined" != typeof Symbol &&
        Symbol.toStringTag &&
        Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }),
        Object.defineProperty(e, "__esModule", { value: !0 });
    });
  var n = o(607);
  bhlabs = n;
})();
